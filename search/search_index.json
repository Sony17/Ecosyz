{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ecosyz Documentation","text":"<p>Welcome to the Ecosyz project documentation! This is a comprehensive guide for developers, contributors, and users of the Open Idea platform.</p>"},{"location":"#table-of-contents","title":"\ud83d\udccb Table of Contents","text":""},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Quick Start - Fast setup guide for new developers</li> <li>Architecture Overview - System design and components</li> <li>Migration Guide - Platform migration instructions</li> </ul>"},{"location":"#development","title":"\ud83d\udd27 Development","text":"<ul> <li>API Documentation - Complete API reference and endpoints</li> <li>Database Schema - Database design and relationships</li> <li>Authentication - Auth system and user management</li> <li>Contributing Guide - Development workflow and standards</li> </ul>"},{"location":"#ai-ml-features","title":"\ud83e\udd16 AI &amp; ML Features","text":"<ul> <li>AI Basics - Core AI functionality</li> <li>Summarization Engine - Text summarization system</li> <li>Dedupe Pipeline - Duplicate detection system</li> <li>LRU Cache - Caching implementation</li> </ul>"},{"location":"#deployment-operations","title":"\ufffd Deployment &amp; Operations","text":"<ul> <li>Deployment Guide - Production deployment and infrastructure</li> <li>Migration Guide - Database and system migrations</li> <li>Backlog - Feature backlog and roadmap</li> <li>TODO List - Current tasks and priorities</li> </ul>"},{"location":"#quick-links","title":"\ud83c\udfaf Quick Links","text":"<ul> <li>Live Demo: View Application</li> <li>Repository: GitHub</li> <li>Issues: Report Bugs</li> <li>Discussions: Community Chat</li> </ul>"},{"location":"#contributing","title":"\ud83d\udc65 Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on: - Setting up your development environment - Code standards and practices - Testing guidelines - Pull request process</p>"},{"location":"#support","title":"\ud83d\udcde Support","text":"<ul> <li>Documentation Issues: Open Issue</li> <li>Feature Requests: Open Issue</li> <li>General Help: Discussions</li> </ul> <p>Last updated: September 22, 2025</p>"},{"location":"#project-status","title":"\ud83d\udcc8 Project Status","text":"<ul> <li>\u2705 Authentication System - Complete with OAuth, password reset</li> <li>\u2705 User Profiles - Profile management and customization</li> <li>\u2705 AI Integration - Summarization and search capabilities</li> <li>\u2705 Database - PostgreSQL with Prisma ORM</li> <li>\ud83d\udea7 Search Engine - Multi-source academic search</li> <li>\ud83d\udea7 Resource Management - Workspace and annotation system</li> </ul>"},{"location":"#tech-stack","title":"\ud83d\udee0\ufe0f Tech Stack","text":"<ul> <li>Frontend: Next.js 14, React, TypeScript, Tailwind CSS</li> <li>Backend: Next.js API Routes, Supabase</li> <li>Database: PostgreSQL, Prisma ORM</li> <li>Authentication: Supabase Auth</li> <li>Deployment: Vercel</li> <li>AI/ML: Custom summarization engine</li> </ul> <p>For questions or feedback, please reach out through GitHub Issues or Discussions.</p>"},{"location":"API_TESTING_GUIDE/","title":"Ecosyz Authentication API Testing Guide","text":"<p>This guide provides comprehensive curl commands to test all authentication and profile APIs.</p>"},{"location":"API_TESTING_GUIDE/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Start the development server:    <pre><code>npm run dev\n</code></pre></p> </li> <li> <p>The server will run on <code>http://localhost:3000</code> (or the port shown in the terminal)</p> </li> </ol>"},{"location":"API_TESTING_GUIDE/#api-endpoints-testing","title":"API Endpoints Testing","text":""},{"location":"API_TESTING_GUIDE/#1-user-registration-sign-up","title":"1. User Registration (Sign Up)","text":"<pre><code>curl -X POST \"http://localhost:3000/api/auth/signup\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"test@example.com\",\n    \"password\": \"testpassword123\",\n    \"name\": \"Test User\"\n  }'\n</code></pre>"},{"location":"API_TESTING_GUIDE/#2-user-authentication-sign-in","title":"2. User Authentication (Sign In)","text":"<pre><code>curl -X POST \"http://localhost:3000/api/auth/signin\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"test@example.com\",\n    \"password\": \"testpassword123\"\n  }' \\\n  -c cookies.txt\n</code></pre> <p>Note: The <code>-c cookies.txt</code> flag saves session cookies for subsequent requests.</p>"},{"location":"API_TESTING_GUIDE/#3-get-current-session","title":"3. Get Current Session","text":"<pre><code>curl -X GET \"http://localhost:3000/api/auth/session\" \\\n  -b cookies.txt\n</code></pre>"},{"location":"API_TESTING_GUIDE/#4-get-user-profile","title":"4. Get User Profile","text":"<pre><code>curl -X GET \"http://localhost:3000/api/profile\" \\\n  -b cookies.txt\n</code></pre>"},{"location":"API_TESTING_GUIDE/#5-update-user-profile","title":"5. Update User Profile","text":"<pre><code>curl -X PUT \"http://localhost:3000/api/profile\" \\\n  -H \"Content-Type: application/json\" \\\n  -b cookies.txt \\\n  -d '{\n    \"displayName\": \"Updated Test User\",\n    \"bio\": \"This is my updated bio\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en-IN\",\n      \"emailNotifications\": true,\n      \"marketingEmails\": false\n    }\n  }'\n</code></pre>"},{"location":"API_TESTING_GUIDE/#6-uploadupdate-avatar","title":"6. Upload/Update Avatar","text":"<pre><code>curl -X PUT \"http://localhost:3000/api/profile/avatar\" \\\n  -H \"Content-Type: application/json\" \\\n  -b cookies.txt \\\n  -d '{\n    \"avatarUrl\": \"https://example.com/my-avatar.jpg\"\n  }'\n</code></pre>"},{"location":"API_TESTING_GUIDE/#7-sign-out","title":"7. Sign Out","text":"<pre><code>curl -X POST \"http://localhost:3000/api/auth/signout\" \\\n  -b cookies.txt\n</code></pre>"},{"location":"API_TESTING_GUIDE/#9-delete-user-account","title":"9. Delete User Account","text":"<pre><code>curl -X DELETE \"http://localhost:3000/api/auth/delete\" \\\n  -b cookies.txt\n</code></pre> <p>Note: This endpoint requires authentication and will permanently delete the user account from both Supabase and the local database.</p>"},{"location":"API_TESTING_GUIDE/#automated-testing-script","title":"Automated Testing Script","text":"<p>Run the comprehensive test script:</p> <pre><code>./test-auth-apis.sh\n</code></pre> <p>This script will: - Test all endpoints in sequence - Save cookies automatically - Show responses for each API call - Clean up cookies after testing</p>"},{"location":"API_TESTING_GUIDE/#expected-responses","title":"Expected Responses","text":""},{"location":"API_TESTING_GUIDE/#successful-sign-up","title":"Successful Sign Up","text":"<pre><code>{\n  \"user\": {\n    \"id\": \"user-uuid\",\n    \"email\": \"test@example.com\",\n    \"user_metadata\": {\n      \"name\": \"Test User\"\n    }\n  }\n}\n</code></pre>"},{"location":"API_TESTING_GUIDE/#successful-sign-in","title":"Successful Sign In","text":"<pre><code>{\n  \"user\": {\n    \"id\": \"user-uuid\",\n    \"email\": \"test@example.com\"\n  },\n  \"session\": {\n    \"access_token\": \"jwt-token\",\n    \"refresh_token\": \"refresh-token\"\n  }\n}\n</code></pre>"},{"location":"API_TESTING_GUIDE/#successful-profile-update","title":"Successful Profile Update","text":"<pre><code>{\n  \"id\": \"profile-uuid\",\n  \"userId\": \"user-uuid\",\n  \"displayName\": \"Updated Test User\",\n  \"bio\": \"This is my updated bio\",\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-IN\",\n    \"emailNotifications\": true\n  }\n}\n</code></pre>"},{"location":"API_TESTING_GUIDE/#error-responses","title":"Error Responses","text":""},{"location":"API_TESTING_GUIDE/#authentication-required","title":"Authentication Required","text":"<pre><code>{\n  \"error\": \"Not authenticated\"\n}\n</code></pre>"},{"location":"API_TESTING_GUIDE/#validation-error","title":"Validation Error","text":"<pre><code>{\n  \"error\": \"Validation failed\",\n  \"details\": [...]\n}\n</code></pre>"},{"location":"API_TESTING_GUIDE/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>\"Not authenticated\" errors: Make sure you're using <code>-b cookies.txt</code> and that the user is signed in</li> <li>Foreign key constraint errors: The <code>ensureUserInDb</code> function should prevent these</li> <li>Port issues: Check that the server is running on the correct port (usually 3001)</li> <li>Cookie issues: Delete <code>cookies.txt</code> and sign in again if cookies become invalid</li> </ol>"},{"location":"API_TESTING_GUIDE/#testing-oauth-providers","title":"Testing OAuth Providers","text":""},{"location":"API_TESTING_GUIDE/#google-oauth","title":"Google OAuth","text":"<pre><code>curl -X GET \"http://localhost:3000/api/auth/google\"\n</code></pre>"},{"location":"API_TESTING_GUIDE/#github-oauth","title":"GitHub OAuth","text":"<pre><code>curl -X GET \"http://localhost:3000/api/auth/github\"\n</code></pre>"},{"location":"API_TESTING_GUIDE/#password-reset","title":"Password Reset","text":""},{"location":"API_TESTING_GUIDE/#request-password-reset","title":"Request Password Reset","text":"<pre><code>curl -X POST \"http://localhost:3000/api/auth/reset-password\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"test@example.com\"\n  }'\n</code></pre>"},{"location":"API_TESTING_GUIDE/#update-password","title":"Update Password","text":"<pre><code>curl -X POST \"http://localhost:3000/api/auth/update-password\" \\\n  -H \"Content-Type: application/json\" \\\n  -b cookies.txt \\\n  -d '{\n    \"password\": \"newpassword123\"\n  }'\n</code></pre>"},{"location":"MIGRATION/","title":"Database Migration Guide","text":"<p>This guide explains how to migrate from SQLite (dev) to a production database like PostgreSQL.</p>"},{"location":"MIGRATION/#current-setup-sqlite","title":"Current Setup (SQLite)","text":"<ul> <li>Provider: <code>sqlite</code></li> <li>URL: <code>file:./dev.db</code></li> <li>Command: <code>npm run db:push</code> (direct schema push, no migrations)</li> </ul>"},{"location":"MIGRATION/#migrating-to-production-eg-postgresql","title":"Migrating to Production (e.g., PostgreSQL)","text":""},{"location":"MIGRATION/#1-choose-a-database","title":"1. Choose a Database","text":"<ul> <li>Options: Neon, Supabase, PlanetScale, Railway, or self-hosted PostgreSQL/MySQL.</li> <li>Get the connection URL (e.g., <code>postgresql://user:pass@host:port/db</code>).</li> </ul>"},{"location":"MIGRATION/#2-update-environment","title":"2. Update Environment","text":"<ul> <li>Edit <code>.env</code>:   <pre><code>DATABASE_URL=\"postgresql://user:pass@host:port/db\"\n</code></pre></li> </ul>"},{"location":"MIGRATION/#3-update-schema","title":"3. Update Schema","text":"<ul> <li>Edit <code>prisma/schema.prisma</code>:   <pre><code>datasource db {\n  provider = \"postgresql\"  // or \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n</code></pre></li> </ul>"},{"location":"MIGRATION/#4-generate-migrations","title":"4. Generate Migrations","text":"<ul> <li>Run: <code>npm run db:migrate</code></li> <li>This creates migration files in <code>prisma/migrations/</code>.</li> <li>Applies them to the database.</li> </ul>"},{"location":"MIGRATION/#5-deploy","title":"5. Deploy","text":"<ul> <li>For production: <code>npx prisma migrate deploy</code> (applies migrations without generating new ones).</li> <li>Update your Vercel env vars with the new <code>DATABASE_URL</code>.</li> </ul>"},{"location":"MIGRATION/#6-notes","title":"6. Notes","text":"<ul> <li>Schema remains the same; only provider/URL changes.</li> <li>Test locally with a test DB before deploying.</li> <li>Use <code>npm run prisma:studio</code> to view data in both setups.</li> </ul>"},{"location":"PROFILE/","title":"User Profile System","text":"<p>This document describes the User Profile System implementation for the OpenIdea project.</p>"},{"location":"PROFILE/#overview","title":"Overview","text":"<p>The User Profile System allows authenticated users to manage their profile information, including display name, bio, avatar, and preferences. It integrates with Supabase Auth and uses Prisma for data persistence.</p>"},{"location":"PROFILE/#features","title":"Features","text":"<ul> <li>Profile Management: Display name, bio, and avatar</li> <li>User Preferences: Theme, language, email notification settings</li> <li>Avatar Upload: Image upload to Supabase Storage with validation</li> <li>Form Validation: Client and server-side validation using Zod</li> <li>Responsive UI: Works on desktop and mobile devices</li> <li>Auth Integration: Protected routes and session management</li> </ul>"},{"location":"PROFILE/#database-schema","title":"Database Schema","text":"<p>The system uses a <code>Profile</code> model with a 1:1 relationship to the <code>User</code> model:</p> <pre><code>model Profile {\n  id          String   @id @default(cuid())\n  userId      String   @unique\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  displayName String?\n  bio         String?  @db.Text\n  avatarUrl   String?\n  preferences Json?    // { theme: \"system\"|\"light\"|\"dark\", language: \"en-IN\", emailNotifications: boolean, marketingEmails: boolean }\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n</code></pre>"},{"location":"PROFILE/#setup-instructions","title":"Setup Instructions","text":""},{"location":"PROFILE/#1-database-migration","title":"1. Database Migration","text":"<p>Run the profile migration:</p> <pre><code>pnpm run db:migrate\n</code></pre> <p>Or manually:</p> <pre><code>npx prisma migrate dev --name profile_init\n</code></pre>"},{"location":"PROFILE/#2-supabase-storage-setup","title":"2. Supabase Storage Setup","text":"<ol> <li>Go to your Supabase Dashboard \u2192 Storage</li> <li>Create a new bucket named <code>avatars</code></li> <li>Set bucket to public (or configure appropriate RLS policies)</li> <li>Note: The bucket should allow public read access for avatar images</li> </ol>"},{"location":"PROFILE/#3-environment-variables","title":"3. Environment Variables","text":"<p>Ensure these environment variables are set:</p> <pre><code># Supabase\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n\n# Database\nDATABASE_URL=your_database_url\nDIRECT_URL=your_direct_database_url\n</code></pre>"},{"location":"PROFILE/#api-endpoints","title":"API Endpoints","text":""},{"location":"PROFILE/#get-apiprofile","title":"GET /api/profile","text":"<p>Returns the current user's profile data. Creates a default profile if none exists.</p> <p>Response: <pre><code>{\n  \"profile\": {\n    \"id\": \"profile_id\",\n    \"displayName\": \"John Doe\",\n    \"bio\": \"Software developer...\",\n    \"avatarUrl\": \"https://...\",\n    \"preferences\": {\n      \"theme\": \"system\",\n      \"language\": \"en-IN\",\n      \"emailNotifications\": true,\n      \"marketingEmails\": false\n    },\n    \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n  }\n}\n</code></pre></p>"},{"location":"PROFILE/#put-apiprofile","title":"PUT /api/profile","text":"<p>Updates the user's profile information.</p> <p>Request Body: <pre><code>{\n  \"displayName\": \"John Doe\",\n  \"bio\": \"Updated bio...\",\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en-US\",\n    \"emailNotifications\": true,\n    \"marketingEmails\": false\n  }\n}\n</code></pre></p>"},{"location":"PROFILE/#post-apiprofileavatar","title":"POST /api/profile/avatar","text":"<p>Uploads a new avatar image.</p> <p>Request: <code>multipart/form-data</code> with <code>file</code> field Supported formats: Images only (JPG, PNG, WebP, etc.) Max size: 2MB</p> <p>Response: <pre><code>{\n  \"avatarUrl\": \"https://supabase-url/storage/v1/object/public/avatars/userId/timestamp.ext\",\n  \"profile\": { ... }\n}\n</code></pre></p>"},{"location":"PROFILE/#ui-components","title":"UI Components","text":""},{"location":"PROFILE/#profile-page-profile","title":"Profile Page (<code>/profile</code>)","text":"<ul> <li>Server component with auth guard</li> <li>Redirects to <code>/auth-test</code> if not authenticated</li> <li>Fetches profile data server-side</li> <li>Uses existing layout components (Header, Footer, Container)</li> </ul>"},{"location":"PROFILE/#profileform-component","title":"ProfileForm Component","text":"<p>Client component with React Hook Form integration:</p> <ul> <li>Display Name: Required, max 50 characters</li> <li>Bio: Optional, max 500 characters</li> <li>Theme: Select (system/light/dark)</li> <li>Language: Select (currently en-IN default)</li> <li>Email Notifications: Checkbox</li> <li>Marketing Emails: Checkbox</li> </ul>"},{"location":"PROFILE/#avataruploader-component","title":"AvatarUploader Component","text":"<p>Handles image upload with preview:</p> <ul> <li>File validation (images only, 2MB max)</li> <li>Immediate upload on selection</li> <li>Preview with loading states</li> <li>Error handling with toast notifications</li> </ul>"},{"location":"PROFILE/#testing","title":"Testing","text":""},{"location":"PROFILE/#manual-testing-steps","title":"Manual Testing Steps","text":"<ol> <li> <p>Authentication: Ensure user is logged in via <code>/auth-test</code></p> </li> <li> <p>Access Profile Page:</p> </li> <li>Navigate to <code>/profile</code></li> <li>Verify auth guard redirects if not logged in</li> <li> <p>Check page loads with existing or default profile data</p> </li> <li> <p>Update Profile:</p> </li> <li>Modify display name, bio, and preferences</li> <li>Click \"Save Changes\"</li> <li>Verify success toast and data persistence</li> <li> <p>Check form validation for required fields</p> </li> <li> <p>Avatar Upload:</p> </li> <li>Click \"Change Avatar\"</li> <li>Select an image file (&lt; 2MB)</li> <li>Verify upload progress and success</li> <li>Check avatar preview updates</li> <li> <p>Test error cases (invalid file type, size too large)</p> </li> <li> <p>Database Verification:</p> </li> <li>Check Prisma Studio: <code>pnpm run db:studio</code></li> <li>Verify Profile record exists with correct data</li> <li>Confirm avatar URL is stored</li> </ol>"},{"location":"PROFILE/#api-testing","title":"API Testing","text":"<pre><code># Get profile\ncurl -H \"Cookie: sb-access-token=...\" http://localhost:3001/api/profile\n\n# Update profile\ncurl -X PUT -H \"Content-Type: application/json\" -H \"Cookie: sb-access-token=...\" \\\n  -d '{\"displayName\":\"Test User\",\"bio\":\"Test bio\",\"preferences\":{\"theme\":\"dark\",\"language\":\"en-IN\",\"emailNotifications\":true,\"marketingEmails\":false}}' \\\n  http://localhost:3001/api/profile\n\n# Upload avatar\ncurl -X POST -H \"Cookie: sb-access-token=...\" \\\n  -F \"file=@/path/to/image.jpg\" \\\n  http://localhost:3001/api/profile/avatar\n</code></pre>"},{"location":"PROFILE/#navigation","title":"Navigation","text":"<ul> <li>Profile link appears in header navigation when authenticated</li> <li>Available in both desktop and mobile menus</li> <li>Links to <code>/profile</code> route</li> </ul>"},{"location":"PROFILE/#error-handling","title":"Error Handling","text":"<ul> <li>Form validation with Zod schemas</li> <li>API error responses with descriptive messages</li> <li>Toast notifications for user feedback</li> <li>File upload validation and error states</li> <li>Graceful fallbacks for missing data</li> </ul>"},{"location":"PROFILE/#security-considerations","title":"Security Considerations","text":"<ul> <li>All routes require authentication</li> <li>File upload validation (type, size)</li> <li>Supabase Storage bucket permissions</li> <li>Input sanitization via Zod validation</li> <li>CSRF protection via Next.js</li> </ul>"},{"location":"PROFILE/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Email verification integration</li> <li>Profile completion onboarding flow</li> <li>Social media profile linking</li> <li>Advanced avatar editing (crop, filters)</li> <li>Profile analytics and insights</li> </ul>"},{"location":"TODO/","title":"\ud83d\ude80 Outstanding Tasks","text":""},{"location":"TODO/#high-priority","title":"\ud83c\udfaf High Priority","text":"<ul> <li> <p>[done ] [Backend][Growth] Feedback Chat: Email Integration       Enable chat feedback to be sent to email; prompt for name and phone number for further follow-up.</p> </li> <li> <p>[ ] [Frontend][Design] Hero Section Improvements       Enhance hero section visuals and messaging for maximum impact.</p> </li> <li> <p>[ ] [Frontend][Backend][Growth] Get Early Access Flow       Create a seamless early access registration/onboarding flow.</p> </li> <li> <p>[ ] [Frontend][Growth] Newsletter Subscription       Add and connect a newsletter sign-up form.</p> </li> </ul>"},{"location":"TODO/#medium-priority","title":"\u2728 Medium Priority","text":"<ul> <li> <p>[ ] [Frontend][Product/Content] FAQ Section       Build a comprehensive frequently asked questions section.</p> </li> <li> <p>[ ] [Frontend] Global Search Bar       Add a universal search bar to navigate all projects/resources.</p> </li> <li> <p>[ ] [Frontend][Design] Hover Effects       Enhance hover states across UI elements for better interactivity.</p> </li> <li> <p>[ ] [Frontend][Design] Remove Small Text       Audit and replace/remove small font sizes for better accessibility.</p> </li> <li> <p>[ ] [Frontend][Product/Content][Growth] Partner With Us Section       Create and highlight a \u201cPartner with Us\u201d area.</p> </li> <li> <p>[ ] [Product/Content] How People Can Partner Guide       Step-by-step instructions for potential partners.</p> </li> <li> <p>[ ] [Frontend][Growth] Launch Partner Join Option       Allow launch partners to express interest or sign up.</p> </li> <li> <p>[ ] [Frontend][Growth] Join Beta Program       Add CTA/button for users to join beta waitlist.</p> </li> </ul>"},{"location":"TODO/#backlog-supporting-tasks","title":"\ud83d\ude80 Backlog / Supporting Tasks","text":"<ul> <li> <p>[ ] [Frontend] Toggle Component       Implement a settings/preferences toggle switch.</p> </li> <li> <p>[ ] [Product/Content] Whitepaper Review       Review, edit, and remove any controversial/unverified stats.</p> </li> <li> <p>[ ] [Frontend][Design] Glow Effect Check       Audit and optimize all glowing visual effects.</p> </li> <li> <p>[ ] [Frontend][Growth] Primary Call-to-Action (CTA)       Optimize/add a strong CTA (\u201cGet Started\u201d, \u201cJoin Now\u201d, etc.).</p> </li> <li> <p>[ ] [Frontend][Content] Learn More Section       Provide a section with detailed product info.</p> </li> <li> <p>[ ] [Frontend][Design] Section Divider Component       Add stylish dividers between homepage sections.</p> </li> <li> <p>[ ] [Frontend][Growth] Discord Link       Add and highlight Discord community link.</p> </li> <li> <p>[ ] [Frontend][Backend] New Project Page       Build a page for users to submit new projects.</p> </li> </ul>"},{"location":"TODO/#tag-key","title":"\ud83c\udff7\ufe0f Tag Key","text":"<ul> <li>[Frontend] UI, interactivity, forms, effects  </li> <li>[Backend] Integrations, data handling  </li> <li>[Design] Visual polish, layouts  </li> <li>[Product/Content] Docs, guides, questions  </li> <li>[Growth] Community, waitlists, newsletters</li> </ul> <p>toggle make it mobile compatible youtube </p>"},{"location":"api-documentation/","title":"API Documentation","text":"<p>This document provides comprehensive documentation for Ecosyz's API endpoints.</p>"},{"location":"api-documentation/#overview","title":"\ud83d\udccb Overview","text":"<p>Ecosyz uses Next.js API routes for backend functionality. All endpoints are RESTful and return JSON responses.</p>"},{"location":"api-documentation/#base-url","title":"Base URL","text":"<pre><code>https://your-domain.com/api\n</code></pre>"},{"location":"api-documentation/#authentication","title":"Authentication","text":"<p>Most endpoints require authentication via Supabase JWT tokens.</p> <pre><code>// Include in request headers\n{\n  'Authorization': `Bearer ${supabaseToken}`,\n  'Content-Type': 'application/json'\n}\n</code></pre>"},{"location":"api-documentation/#authentication-endpoints","title":"\ud83d\udd10 Authentication Endpoints","text":""},{"location":"api-documentation/#post-apiauthsignup","title":"POST /api/auth/signup","text":"<p>Create a new user account.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\",\n  \"name\": \"John Doe\"\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"user\": {\n    \"id\": \"user-id\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\"\n  },\n  \"message\": \"User created successfully\"\n}\n</code></pre></p> <p>Error Responses: - <code>400</code> - Invalid input data - <code>409</code> - User already exists - <code>500</code> - Server error</p>"},{"location":"api-documentation/#post-apiauthsignin","title":"POST /api/auth/signin","text":"<p>Authenticate a user.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"user\": {\n    \"id\": \"user-id\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\"\n  },\n  \"session\": {\n    \"access_token\": \"jwt-token\",\n    \"refresh_token\": \"refresh-token\",\n    \"expires_at\": 1638360000\n  }\n}\n</code></pre></p>"},{"location":"api-documentation/#post-apiauthsignout","title":"POST /api/auth/signout","text":"<p>Sign out the current user.</p> <p>Response (200): <pre><code>{\n  \"message\": \"Signed out successfully\"\n}\n</code></pre></p>"},{"location":"api-documentation/#get-apiauthsession","title":"GET /api/auth/session","text":"<p>Get current user session information.</p> <p>Response (200): <pre><code>{\n  \"user\": {\n    \"id\": \"user-id\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\"\n  },\n  \"session\": {\n    \"access_token\": \"jwt-token\",\n    \"expires_at\": 1638360000\n  }\n}\n</code></pre></p>"},{"location":"api-documentation/#post-apiauthreset-password","title":"POST /api/auth/reset-password","text":"<p>Request password reset.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"message\": \"Password reset email sent\"\n}\n</code></pre></p>"},{"location":"api-documentation/#search-endpoints","title":"\ud83d\udd0d Search Endpoints","text":""},{"location":"api-documentation/#get-apisearch","title":"GET /api/search","text":"<p>Search for academic resources across multiple providers.</p> <p>Query Parameters: - <code>q</code> (required): Search query - <code>limit</code> (optional): Number of results (default: 20, max: 100) - <code>offset</code> (optional): Pagination offset (default: 0) - <code>sort</code> (optional): Sort order (<code>relevance</code>, <code>date</code>, <code>citations</code>) - <code>providers</code> (optional): Comma-separated list of providers</p> <p>Example Request: <pre><code>GET /api/search?q=machine+learning&amp;limit=10&amp;sort=relevance\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"results\": [\n    {\n      \"id\": \"resource-id\",\n      \"title\": \"Machine Learning Fundamentals\",\n      \"authors\": [\"John Smith\", \"Jane Doe\"],\n      \"abstract\": \"An introduction to machine learning...\",\n      \"url\": \"https://example.com/paper\",\n      \"provider\": \"arxiv\",\n      \"publishedDate\": \"2023-01-15\",\n      \"citations\": 150,\n      \"score\": 0.95\n    }\n  ],\n  \"total\": 1250,\n  \"hasMore\": true,\n  \"query\": \"machine learning\",\n  \"took\": 250\n}\n</code></pre></p> <p>Supported Providers: - <code>arxiv</code> - ArXiv preprint server - <code>pubmed</code> - PubMed medical literature - <code>crossref</code> - Crossref DOI registry - <code>semantic</code> - Semantic Scholar - <code>youtube</code> - Educational YouTube videos</p>"},{"location":"api-documentation/#get-apisearchproviders","title":"GET /api/search/providers","text":"<p>Get information about available search providers.</p> <p>Response (200): <pre><code>{\n  \"providers\": [\n    {\n      \"id\": \"arxiv\",\n      \"name\": \"ArXiv\",\n      \"description\": \"Open access preprint server\",\n      \"enabled\": true,\n      \"rateLimit\": 1000\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-documentation/#summarization-endpoints","title":"\ud83d\udcdd Summarization Endpoints","text":""},{"location":"api-documentation/#post-apisummarize","title":"POST /api/summarize","text":"<p>Generate AI-powered summaries of academic content.</p> <p>Request Body: <pre><code>{\n  \"content\": \"Full text content to summarize...\",\n  \"url\": \"https://example.com/paper\",\n  \"type\": \"research_paper\"\n}\n</code></pre></p> <p>Response (200): <pre><code>{\n  \"summary\": {\n    \"abstract\": \"Brief overview of the paper...\",\n    \"keyPoints\": [\n      \"Main finding 1\",\n      \"Main finding 2\",\n      \"Methodology used\"\n    ],\n    \"conclusion\": \"Summary of conclusions...\",\n    \"keywords\": [\"machine learning\", \"neural networks\"]\n  },\n  \"metadata\": {\n    \"wordCount\": 2500,\n    \"readingTime\": 12,\n    \"confidence\": 0.89\n  }\n}\n</code></pre></p> <p>Supported Content Types: - <code>research_paper</code> - Academic papers - <code>article</code> - News articles - <code>book</code> - Book chapters - <code>video_transcript</code> - Video transcripts</p>"},{"location":"api-documentation/#workspace-endpoints","title":"\ud83d\uddc2\ufe0f Workspace Endpoints","text":""},{"location":"api-documentation/#get-apiworkspaces","title":"GET /api/workspaces","text":"<p>Get user's workspaces.</p> <p>Query Parameters: - <code>limit</code> (optional): Number of workspaces (default: 20) - <code>offset</code> (optional): Pagination offset</p> <p>Response (200): <pre><code>{\n  \"workspaces\": [\n    {\n      \"id\": \"workspace-id\",\n      \"name\": \"Machine Learning Research\",\n      \"description\": \"Collection of ML papers\",\n      \"createdAt\": \"2024-01-01T00:00:00Z\",\n      \"updatedAt\": \"2024-01-15T10:30:00Z\",\n      \"resourceCount\": 25,\n      \"isPublic\": false\n    }\n  ],\n  \"total\": 5\n}\n</code></pre></p>"},{"location":"api-documentation/#post-apiworkspaces","title":"POST /api/workspaces","text":"<p>Create a new workspace.</p> <p>Request Body: <pre><code>{\n  \"name\": \"My Research Workspace\",\n  \"description\": \"Collection of papers for my thesis\",\n  \"isPublic\": false\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"workspace\": {\n    \"id\": \"new-workspace-id\",\n    \"name\": \"My Research Workspace\",\n    \"description\": \"Collection of papers for my thesis\",\n    \"createdAt\": \"2024-01-20T15:30:00Z\",\n    \"isPublic\": false\n  }\n}\n</code></pre></p>"},{"location":"api-documentation/#get-apiworkspacesid","title":"GET /api/workspaces/[id]","text":"<p>Get workspace details and resources.</p> <p>Response (200): <pre><code>{\n  \"workspace\": {\n    \"id\": \"workspace-id\",\n    \"name\": \"Machine Learning Research\",\n    \"description\": \"Collection of ML papers\",\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"resourceCount\": 25,\n    \"isPublic\": false\n  },\n  \"resources\": [\n    {\n      \"id\": \"resource-id\",\n      \"title\": \"Deep Learning Paper\",\n      \"addedAt\": \"2024-01-15T10:30:00Z\",\n      \"notes\": \"Important paper on neural networks\",\n      \"tags\": [\"deep-learning\", \"neural-networks\"]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-documentation/#post-apiworkspacesidresources","title":"POST /api/workspaces/[id]/resources","text":"<p>Add a resource to a workspace.</p> <p>Request Body: <pre><code>{\n  \"resourceId\": \"resource-id\",\n  \"notes\": \"Key insights from this paper\",\n  \"tags\": [\"machine-learning\", \"computer-vision\"]\n}\n</code></pre></p> <p>Response (201): <pre><code>{\n  \"resource\": {\n    \"id\": \"workspace-resource-id\",\n    \"resourceId\": \"resource-id\",\n    \"workspaceId\": \"workspace-id\",\n    \"notes\": \"Key insights from this paper\",\n    \"tags\": [\"machine-learning\", \"computer-vision\"],\n    \"addedAt\": \"2024-01-20T15:30:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api-documentation/#delete-apiworkspacesidresourcesresourceid","title":"DELETE /api/workspaces/[id]/resources/[resourceId]","text":"<p>Remove a resource from a workspace.</p> <p>Response (200): <pre><code>{\n  \"message\": \"Resource removed from workspace\"\n}\n</code></pre></p>"},{"location":"api-documentation/#analytics-endpoints","title":"\ud83d\udcca Analytics Endpoints","text":""},{"location":"api-documentation/#get-apianalyticssearch","title":"GET /api/analytics/search","text":"<p>Get search analytics for the current user.</p> <p>Query Parameters: - <code>period</code> (optional): Time period (<code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>)</p> <p>Response (200): <pre><code>{\n  \"searches\": [\n    {\n      \"query\": \"machine learning\",\n      \"count\": 15,\n      \"lastSearched\": \"2024-01-20T10:00:00Z\"\n    }\n  ],\n  \"totalSearches\": 150,\n  \"popularTopics\": [\"machine learning\", \"neural networks\", \"deep learning\"],\n  \"period\": \"month\"\n}\n</code></pre></p>"},{"location":"api-documentation/#get-apianalyticsresources","title":"GET /api/analytics/resources","text":"<p>Get resource analytics.</p> <p>Response (200): <pre><code>{\n  \"savedResources\": 45,\n  \"sharedResources\": 12,\n  \"topCategories\": [\n    { \"category\": \"Computer Science\", \"count\": 25 },\n    { \"category\": \"Biology\", \"count\": 15 }\n  ],\n  \"readingTime\": 240 // minutes\n}\n</code></pre></p>"},{"location":"api-documentation/#utility-endpoints","title":"\ud83d\udd27 Utility Endpoints","text":""},{"location":"api-documentation/#get-apihealth","title":"GET /api/health","text":"<p>Health check endpoint.</p> <p>Response (200): <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-20T15:30:00Z\",\n  \"version\": \"1.0.0\",\n  \"services\": {\n    \"database\": \"connected\",\n    \"redis\": \"connected\",\n    \"supabase\": \"connected\"\n  }\n}\n</code></pre></p>"},{"location":"api-documentation/#get-apidebugemailjs","title":"GET /api/debug/emailjs","text":"<p>Debug EmailJS configuration.</p> <p>Response (200): <pre><code>{\n  \"configured\": true,\n  \"serviceId\": \"service_xxx\",\n  \"templateId\": \"template_xxx\",\n  \"publicKey\": \"public_xxx\"\n}\n</code></pre></p>"},{"location":"api-documentation/#rate-limiting","title":"\ud83d\udccb Rate Limiting","text":"<p>API endpoints are rate limited to prevent abuse:</p> <ul> <li>Authenticated requests: 1000 requests per hour</li> <li>Search requests: 100 requests per hour</li> <li>Summarization requests: 50 requests per hour</li> </ul> <p>Rate limit headers are included in responses: <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1638360000\n</code></pre></p>"},{"location":"api-documentation/#error-handling","title":"\ud83d\udea8 Error Handling","text":"<p>All API endpoints follow consistent error response format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input data\",\n    \"details\": {\n      \"field\": \"email\",\n      \"reason\": \"Invalid email format\"\n    }\n  }\n}\n</code></pre>"},{"location":"api-documentation/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>VALIDATION_ERROR</code> - Invalid request data</li> <li><code>AUTHENTICATION_ERROR</code> - Invalid or missing credentials</li> <li><code>AUTHORIZATION_ERROR</code> - Insufficient permissions</li> <li><code>NOT_FOUND</code> - Resource not found</li> <li><code>RATE_LIMITED</code> - Too many requests</li> <li><code>INTERNAL_ERROR</code> - Server error</li> </ul>"},{"location":"api-documentation/#security","title":"\ud83d\udd12 Security","text":""},{"location":"api-documentation/#cors-configuration","title":"CORS Configuration","text":"<p>API endpoints include CORS headers for web application access:</p> <pre><code>Access-Control-Allow-Origin: https://your-domain.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization\n</code></pre>"},{"location":"api-documentation/#input-validation","title":"Input Validation","text":"<p>All inputs are validated using Zod schemas:</p> <pre><code>import { z } from 'zod';\n\nconst searchSchema = z.object({\n  q: z.string().min(1).max(500),\n  limit: z.number().min(1).max(100).optional(),\n  offset: z.number().min(0).optional(),\n});\n</code></pre>"},{"location":"api-documentation/#data-sanitization","title":"Data Sanitization","text":"<p>User inputs are sanitized to prevent XSS attacks: - HTML tags are stripped - Special characters are escaped - SQL injection prevention via parameterized queries</p>"},{"location":"api-documentation/#monitoring","title":"\ud83d\udcca Monitoring","text":"<p>API performance is monitored with:</p> <ul> <li>Response times: Logged for all endpoints</li> <li>Error rates: Tracked by endpoint and error type</li> <li>Usage patterns: Analyzed for optimization opportunities</li> </ul>"},{"location":"api-documentation/#testing","title":"\ud83e\uddea Testing","text":"<p>API endpoints can be tested using:</p> <pre><code># Run API tests\npnpm test -- api\n\n# Test specific endpoint\ncurl -X GET \"https://your-domain.com/api/health\" \\\n  -H \"Authorization: Bearer your-token\"\n</code></pre> <p>For SDKs and client libraries, see the Getting Started guide.</p>"},{"location":"api/","title":"Workspace API Documentation","text":"<p>This document describes the REST API endpoints for the Workspace feature.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All API endpoints require session-based authentication via cookies. The middleware automatically sets anonymous session cookies for all requests.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<p>All endpoints are prefixed with <code>/api</code>.</p>"},{"location":"api/#workspace-apis","title":"Workspace APIs","text":""},{"location":"api/#list-workspaces","title":"List Workspaces","text":"<p>Endpoint: <code>GET /api/workspaces</code></p> <p>Description: Retrieve all workspaces owned by the current user.</p> <p>Response: <pre><code>[\n  {\n    \"id\": \"string\",\n    \"title\": \"string\",\n    \"createdAt\": \"datetime\",\n    \"_count\": {\n      \"resources\": number,\n      \"shares\": number\n    }\n  }\n]\n</code></pre></p>"},{"location":"api/#create-workspace","title":"Create Workspace","text":"<p>Endpoint: <code>POST /api/workspaces</code></p> <p>Description: Create a new workspace.</p> <p>Request Body: <pre><code>{\n  \"title\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"string\",\n  \"title\": \"string\",\n  \"createdAt\": \"datetime\"\n}\n</code></pre></p>"},{"location":"api/#get-workspace-details","title":"Get Workspace Details","text":"<p>Endpoint: <code>GET /api/workspaces/[id]</code></p> <p>Description: Get detailed information about a specific workspace, including resources and annotations.</p> <p>Response: <pre><code>{\n  \"id\": \"string\",\n  \"title\": \"string\",\n  \"ownerId\": \"string\",\n  \"createdAt\": \"datetime\",\n  \"resources\": [\n    {\n      \"id\": \"string\",\n      \"title\": \"string\",\n      \"url\": \"string\",\n      \"type\": \"string\",\n      \"tags\": [],\n      \"data\": {},\n      \"createdAt\": \"datetime\",\n      \"annotations\": [\n        {\n          \"id\": \"string\",\n          \"body\": \"string\",\n          \"highlights\": {},\n          \"createdAt\": \"datetime\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/#update-workspace","title":"Update Workspace","text":"<p>Endpoint: <code>PATCH /api/workspaces/[id]</code></p> <p>Description: Update workspace title.</p> <p>Request Body: <pre><code>{\n  \"title\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"string\",\n  \"title\": \"string\",\n  \"createdAt\": \"datetime\"\n}\n</code></pre></p>"},{"location":"api/#delete-workspace","title":"Delete Workspace","text":"<p>Endpoint: <code>DELETE /api/workspaces/[id]</code></p> <p>Description: Delete a workspace and all associated resources, annotations, and share links.</p> <p>Response: <pre><code>{\n  \"message\": \"Deleted\"\n}\n</code></pre></p>"},{"location":"api/#resource-apis","title":"Resource APIs","text":""},{"location":"api/#list-resources","title":"List Resources","text":"<p>Endpoint: <code>GET /api/workspaces/[id]/resources</code></p> <p>Description: Get all resources in a workspace.</p> <p>Response: <pre><code>[\n  {\n    \"id\": \"string\",\n    \"workspaceId\": \"string\",\n    \"title\": \"string\",\n    \"url\": \"string\",\n    \"type\": \"string\",\n    \"tags\": [],\n    \"data\": {},\n    \"createdAt\": \"datetime\",\n    \"annotations\": [\n      {\n        \"id\": \"string\",\n        \"body\": \"string\",\n        \"highlights\": {},\n        \"createdAt\": \"datetime\"\n      }\n    ]\n  }\n]\n</code></pre></p>"},{"location":"api/#create-resource","title":"Create Resource","text":"<p>Endpoint: <code>POST /api/workspaces/[id]/resources</code></p> <p>Description: Add a new resource to a workspace.</p> <p>Request Body: <pre><code>{\n  \"title\": \"string\",\n  \"url\": \"string (optional)\",\n  \"notes\": \"string (optional)\",\n  \"type\": \"string (optional)\",\n  \"tags\": [\"string\"] (optional),\n  \"data\": {} (optional)\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"string\",\n  \"workspaceId\": \"string\",\n  \"title\": \"string\",\n  \"url\": \"string\",\n  \"type\": \"string\",\n  \"tags\": [],\n  \"data\": {},\n  \"createdAt\": \"datetime\"\n}\n</code></pre></p>"},{"location":"api/#annotation-apis","title":"Annotation APIs","text":""},{"location":"api/#list-annotations","title":"List Annotations","text":"<p>Endpoint: <code>GET /api/resources/[id]/annotations</code></p> <p>Description: Get all annotations for a resource.</p> <p>Response: <pre><code>[\n  {\n    \"id\": \"string\",\n    \"resourceId\": \"string\",\n    \"body\": \"string\",\n    \"highlights\": {},\n    \"createdAt\": \"datetime\"\n  }\n]\n</code></pre></p>"},{"location":"api/#create-annotation","title":"Create Annotation","text":"<p>Endpoint: <code>POST /api/resources/[id]/annotations</code></p> <p>Description: Add an annotation to a resource.</p> <p>Request Body: <pre><code>{\n  \"body\": \"string\",\n  \"highlights\": {} (optional)\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"string\",\n  \"resourceId\": \"string\",\n  \"body\": \"string\",\n  \"highlights\": {},\n  \"createdAt\": \"datetime\"\n}\n</code></pre></p>"},{"location":"api/#share-apis","title":"Share APIs","text":""},{"location":"api/#list-share-links","title":"List Share Links","text":"<p>Endpoint: <code>GET /api/workspaces/[id]/share</code></p> <p>Description: Get all share links for a workspace.</p> <p>Response: <pre><code>[\n  {\n    \"id\": \"string\",\n    \"workspaceId\": \"string\",\n    \"token\": \"string\",\n    \"readOnly\": true,\n    \"expiresAt\": \"datetime\",\n    \"createdAt\": \"datetime\"\n  }\n]\n</code></pre></p>"},{"location":"api/#create-share-link","title":"Create Share Link","text":"<p>Endpoint: <code>POST /api/workspaces/[id]/share</code></p> <p>Description: Create a new share link for a workspace.</p> <p>Request Body: <pre><code>{\n  \"expiresAt\": \"datetime (optional)\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"string\",\n  \"workspaceId\": \"string\",\n  \"token\": \"string\",\n  \"readOnly\": true,\n  \"expiresAt\": \"datetime\",\n  \"createdAt\": \"datetime\"\n}\n</code></pre></p>"},{"location":"api/#share-page","title":"Share Page","text":"<p>Endpoint: <code>GET /share/[token]</code></p> <p>Description: Public read-only view of a shared workspace.</p> <p>Response: HTML page displaying the workspace content.</p>"},{"location":"api/#error-responses","title":"Error Responses","text":"<p>All endpoints may return the following error formats:</p> <p>400 Bad Request: <pre><code>{\n  \"error\": \"Validation error message\"\n}\n</code></pre></p> <p>403 Forbidden: <pre><code>{\n  \"error\": \"Not authorized\"\n}\n</code></pre></p> <p>404 Not Found: <pre><code>{\n  \"error\": \"Resource not found\"\n}\n</code></pre></p> <p>500 Internal Server Error: <pre><code>{\n  \"error\": \"Internal server error\"\n}\n</code></pre></p>"},{"location":"api/#data-types","title":"Data Types","text":"<ul> <li><code>string</code>: String value</li> <li><code>datetime</code>: ISO 8601 date string</li> <li><code>number</code>: Integer value</li> <li><code>boolean</code>: true/false</li> <li><code>[]</code>: Array</li> <li><code>{}</code>: Object</li> </ul> <p>POST /api/workspaces - Create workspace (worked) GET /api/workspaces - List workspaces (worked) \u23f3 Remaining API Tests:</p> <p>GET /api/workspaces/[id] - Get workspace details PATCH /api/workspaces/[id] - Update workspace title POST /api/workspaces/[id]/resources - Add resources GET /api/workspaces/[id]/resources - List resources POST /api/resources/[id]/annotations - Add annotations GET /api/resources/[id]/annotations - List annotations POST /api/workspaces/[id]/share - Create share links GET /api/workspaces/[id]/share - List share links GET /share/[token] - Test public share page DELETE /api/workspaces/[id] - Delete workspace</p>"},{"location":"architecture/","title":"Ecosyz Architecture Overview","text":"<p>This document provides a comprehensive overview of the Ecosyz platform architecture, design decisions, and technical implementation.</p>"},{"location":"architecture/#system-architecture","title":"\ud83c\udfd7\ufe0f System Architecture","text":""},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend      \u2502    \u2502   Backend       \u2502    \u2502   Database      \u2502\n\u2502   (Next.js)     \u2502\u25c4\u2500\u2500\u25ba\u2502   (API Routes)  \u2502\u25c4\u2500\u2500\u25ba\u2502   (PostgreSQL)  \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 React/TSX     \u2502    \u2502 \u2022 REST APIs     \u2502    \u2502 \u2022 Prisma ORM    \u2502\n\u2502 \u2022 Tailwind CSS  \u2502    \u2502 \u2022 Auth Logic    \u2502    \u2502 \u2022 User Data     \u2502\n\u2502 \u2022 Components    \u2502    \u2502 \u2022 Business Logic\u2502    \u2502 \u2022 Resources     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                       \u2502                       \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   External      \u2502\n                    \u2502   Services      \u2502\n                    \u2502                 \u2502\n                    \u2502 \u2022 Supabase Auth \u2502\n                    \u2502 \u2022 AI Services   \u2502\n                    \u2502 \u2022 Search APIs   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#technology-stack","title":"\ud83d\udee0\ufe0f Technology Stack","text":""},{"location":"architecture/#frontend-layer","title":"Frontend Layer","text":"<ul> <li>Framework: Next.js 14 (App Router)</li> <li>Language: TypeScript</li> <li>Styling: Tailwind CSS with custom design system</li> <li>State Management: React hooks + server state</li> <li>Forms: React Hook Form + Zod validation</li> <li>UI Components: Custom component library</li> </ul>"},{"location":"architecture/#backend-layer","title":"Backend Layer","text":"<ul> <li>Runtime: Node.js (Next.js API Routes)</li> <li>Authentication: Supabase Auth</li> <li>Database: PostgreSQL via Supabase</li> <li>ORM: Prisma</li> <li>API: RESTful endpoints</li> <li>Validation: Zod schemas</li> </ul>"},{"location":"architecture/#external-services","title":"External Services","text":"<ul> <li>Authentication: Supabase Auth</li> <li>Database: Supabase PostgreSQL</li> <li>File Storage: Supabase Storage</li> <li>Email: Resend (via Supabase)</li> <li>AI Services: OpenAI, custom summarization</li> <li>Search: Google Custom Search, arXiv, etc.</li> </ul>"},{"location":"architecture/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>Ecosyz/\n\u251c\u2500\u2500 app/                          # Next.js App Router\n\u2502   \u251c\u2500\u2500 (auth)/                   # Authentication pages\n\u2502   \u251c\u2500\u2500 (dashboard)/              # Protected pages\n\u2502   \u251c\u2500\u2500 api/                      # API routes\n\u2502   \u2502   \u251c\u2500\u2500 auth/                 # Authentication endpoints\n\u2502   \u2502   \u251c\u2500\u2500 profile/              # Profile management\n\u2502   \u2502   \u251c\u2500\u2500 search/               # Search functionality\n\u2502   \u2502   \u2514\u2500\u2500 workspaces/           # Workspace management\n\u2502   \u251c\u2500\u2500 components/               # React components\n\u2502   \u2502   \u251c\u2500\u2500 ui/                   # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 auth/                 # Auth-specific components\n\u2502   \u2502   \u2514\u2500\u2500 workspace/            # Workspace components\n\u2502   \u2514\u2500\u2500 globals.css               # Global styles\n\u251c\u2500\u2500 docs/                         # Documentation\n\u251c\u2500\u2500 prisma/                       # Database schema\n\u2502   \u251c\u2500\u2500 schema.prisma             # Database models\n\u2502   \u2514\u2500\u2500 migrations/               # Database migrations\n\u251c\u2500\u2500 src/                          # Shared utilities\n\u2502   \u251c\u2500\u2500 lib/                      # Core libraries\n\u2502   \u2502   \u251c\u2500\u2500 auth.ts               # Authentication helpers\n\u2502   \u2502   \u251c\u2500\u2500 db.ts                 # Database client\n\u2502   \u2502   \u251c\u2500\u2500 supabase.ts           # Supabase client\n\u2502   \u2502   \u2514\u2500\u2500 validation.ts         # Zod schemas\n\u2502   \u2514\u2500\u2500 types/                    # TypeScript types\n\u251c\u2500\u2500 public/                       # Static assets\n\u251c\u2500\u2500 tests/                        # Test files\n\u2514\u2500\u2500 types/                        # Global type definitions\n</code></pre>"},{"location":"architecture/#authentication-architecture","title":"\ud83d\udd10 Authentication Architecture","text":""},{"location":"architecture/#authentication-flow","title":"Authentication Flow","text":"<pre><code>1. User Login Request\n        \u2193\n2. Frontend \u2192 /api/auth/signin\n        \u2193\n3. Supabase Auth Validation\n        \u2193\n4. JWT Token Generation\n        \u2193\n5. HTTP-Only Cookies Set\n        \u2193\n6. Database User Sync\n        \u2193\n7. Success Response\n</code></pre>"},{"location":"architecture/#session-management","title":"Session Management","text":"<ul> <li>Storage: HTTP-only cookies (secure, XSS protection)</li> <li>Tokens: JWT access + refresh tokens</li> <li>Validation: Server-side on each request</li> <li>Refresh: Automatic token rotation</li> <li>Logout: Cookie clearing + Supabase session termination</li> </ul>"},{"location":"architecture/#security-features","title":"Security Features","text":"<ul> <li>Password Hashing: Handled by Supabase</li> <li>Token Encryption: JWT with secure signing</li> <li>CSRF Protection: SameSite cookie policy</li> <li>Rate Limiting: Supabase built-in protection</li> <li>Input Validation: Zod schemas on all inputs</li> </ul>"},{"location":"architecture/#database-architecture","title":"\ud83d\uddc4\ufe0f Database Architecture","text":""},{"location":"architecture/#schema-design","title":"Schema Design","text":"<pre><code>-- Core Entities\nUsers (Supabase Auth) \u2190\u2192 Profiles (App Data)\n    \u2193\nWorkspaces (User's Projects)\n    \u2193\nResources (Papers, Articles, etc.)\n    \u2193\nAnnotations (User Notes)\n</code></pre>"},{"location":"architecture/#key-relationships","title":"Key Relationships","text":"<ul> <li>User \u2194 Profile: One-to-one (extended user data)</li> <li>User \u2194 Workspaces: One-to-many (user's projects)</li> <li>Workspace \u2194 Resources: One-to-many (project contents)</li> <li>Resource \u2194 Annotations: One-to-many (user notes)</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<pre><code>API Request \u2192 Validation \u2192 Business Logic \u2192 Database \u2192 Response\n    \u2193            \u2193            \u2193            \u2193         \u2193\n Zod Schema \u2192 Auth Check \u2192 Service Layer \u2192 Prisma \u2192 JSON\n</code></pre>"},{"location":"architecture/#search-architecture","title":"\ud83d\udd0d Search Architecture","text":""},{"location":"architecture/#multi-source-search","title":"Multi-Source Search","text":"<pre><code>User Query \u2192 Search Orchestrator \u2192 Multiple APIs\n    \u2193               \u2193                  \u2193\n  Results \u2192 Deduplication \u2192 Ranking \u2192 Display\n</code></pre>"},{"location":"architecture/#supported-sources","title":"Supported Sources","text":"<ul> <li>Academic: arXiv, Semantic Scholar, OpenAlex</li> <li>Web: Google Custom Search, Bing</li> <li>Code: GitHub Search API</li> <li>Media: YouTube Data API</li> </ul>"},{"location":"architecture/#search-pipeline","title":"Search Pipeline","text":"<ol> <li>Query Processing: Parse and normalize search terms</li> <li>Parallel Search: Query multiple APIs simultaneously</li> <li>Deduplication: Remove duplicate results</li> <li>Ranking: Score and sort results</li> <li>Caching: LRU cache for performance</li> </ol>"},{"location":"architecture/#ai-integration","title":"\ud83e\udd16 AI Integration","text":""},{"location":"architecture/#summarization-engine","title":"Summarization Engine","text":"<pre><code>Input Text \u2192 Preprocessing \u2192 AI Model \u2192 Postprocessing \u2192 Summary\n    \u2193            \u2193             \u2193            \u2193            \u2193\nClean Text \u2192 Chunking \u2192 OpenAI API \u2192 Formatting \u2192 Structured Output\n</code></pre>"},{"location":"architecture/#key-features","title":"Key Features","text":"<ul> <li>Multi-format Support: PDF, HTML, plain text</li> <li>Chunking Strategy: Intelligent text splitting</li> <li>Model Selection: GPT-4 for complex, GPT-3.5 for simple</li> <li>Caching: Avoid re-processing same content</li> <li>Error Handling: Fallback strategies</li> </ul>"},{"location":"architecture/#deployment-architecture","title":"\ud83d\ude80 Deployment Architecture","text":""},{"location":"architecture/#vercel-deployment","title":"Vercel Deployment","text":"<pre><code>Git Push \u2192 Vercel Build \u2192 Environment Setup \u2192 Deployment\n    \u2193           \u2193              \u2193               \u2193\n   main     Build Command   Env Variables   Live Site\n branch     (pnpm build)     (.env files)   (CDN)\n</code></pre>"},{"location":"architecture/#environment-strategy","title":"Environment Strategy","text":"<ul> <li>Development: Local <code>.env.local</code></li> <li>Preview: Auto-created per PR</li> <li>Production: Separate environment variables</li> </ul>"},{"location":"architecture/#scaling-considerations","title":"Scaling Considerations","text":"<ul> <li>Serverless: Automatic scaling with Vercel</li> <li>CDN: Global content delivery</li> <li>Database: Supabase handles connection pooling</li> <li>Caching: Next.js ISR + Redis (future)</li> </ul>"},{"location":"architecture/#development-workflow","title":"\ud83d\udd27 Development Workflow","text":""},{"location":"architecture/#code-quality","title":"Code Quality","text":"<pre><code># Linting\npnpm lint\n\n# Type checking\npnpx tsc --noEmit\n\n# Testing\npnpm test\n\n# Build verification\npnpm build\n</code></pre>"},{"location":"architecture/#git-workflow","title":"Git Workflow","text":"<pre><code>feature-branch \u2192 Pull Request \u2192 Code Review \u2192 Merge to main \u2192 Auto-deploy\n</code></pre>"},{"location":"architecture/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ul> <li>Linting: ESLint configuration</li> <li>Type Check: TypeScript compilation</li> <li>Build: Next.js production build</li> <li>Deploy: Vercel automatic deployment</li> </ul>"},{"location":"architecture/#performance-optimization","title":"\ud83d\udcca Performance Optimization","text":""},{"location":"architecture/#frontend-optimizations","title":"Frontend Optimizations","text":"<ul> <li>Code Splitting: Route-based splitting</li> <li>Image Optimization: Next.js Image component</li> <li>Caching: Aggressive caching strategies</li> <li>Bundle Analysis: Bundle analyzer integration</li> </ul>"},{"location":"architecture/#backend-optimizations","title":"Backend Optimizations","text":"<ul> <li>Database Indexing: Optimized queries</li> <li>Caching: Redis for frequent data</li> <li>API Rate Limiting: Prevent abuse</li> <li>Response Compression: Gzip compression</li> </ul>"},{"location":"architecture/#future-architecture","title":"\ud83d\udd2e Future Architecture","text":""},{"location":"architecture/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>Microservices: Split monolithic API</li> <li>GraphQL: Replace REST APIs</li> <li>Real-time: WebSocket integration</li> <li>Advanced AI: Custom model training</li> <li>Multi-region: Global deployment</li> </ul>"},{"location":"architecture/#scalability-roadmap","title":"Scalability Roadmap","text":"<ul> <li>Database: Connection pooling, read replicas</li> <li>Caching: Redis cluster, CDN optimization</li> <li>Monitoring: Application performance monitoring</li> <li>Load Balancing: Advanced routing strategies</li> </ul>"},{"location":"architecture/#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<ul> <li>API Docs: Comprehensive endpoint documentation</li> <li>Component Library: Reusable component documentation</li> <li>Architecture Decisions: ADRs for major decisions</li> <li>Deployment Guide: Infrastructure as code</li> <li>Troubleshooting: Common issues and solutions</li> </ul> <p>This architecture document is living and should be updated as the system evolves.</p>"},{"location":"authentication/","title":"Authentication System","text":"<p>Ecosyz uses a comprehensive authentication system built on Supabase Auth with custom enhancements for user management and session handling.</p>"},{"location":"authentication/#authentication-overview","title":"\ud83d\udd10 Authentication Overview","text":""},{"location":"authentication/#supported-methods","title":"Supported Methods","text":"<ul> <li>Email/Password: Traditional authentication</li> <li>OAuth Providers: GitHub, Google</li> <li>Password Reset: Secure password recovery</li> <li>Session Management: JWT-based sessions</li> </ul>"},{"location":"authentication/#security-features","title":"Security Features","text":"<ul> <li>Password Hashing: Bcrypt via Supabase</li> <li>JWT Tokens: Secure token-based authentication</li> <li>HTTP-Only Cookies: XSS protection</li> <li>CSRF Protection: SameSite cookie policy</li> <li>Rate Limiting: Built-in abuse prevention</li> </ul>"},{"location":"authentication/#authentication-flow","title":"\ud83d\ude80 Authentication Flow","text":""},{"location":"authentication/#user-registration","title":"User Registration","text":"<pre><code>1. User submits registration form\n2. Frontend validates input (Zod)\n3. POST /api/auth/signup\n4. Supabase creates user account\n5. Database syncs user profile\n6. Email confirmation sent (if enabled)\n7. Success response with user data\n</code></pre>"},{"location":"authentication/#user-login","title":"User Login","text":"<pre><code>1. User submits login form\n2. Frontend validates credentials\n3. POST /api/auth/signin\n4. Supabase validates credentials\n5. JWT tokens generated\n6. HTTP-only cookies set\n7. Database user sync\n8. Success response\n</code></pre>"},{"location":"authentication/#oauth-flow","title":"OAuth Flow","text":"<pre><code>1. User clicks OAuth provider\n2. Redirect to /api/auth/{provider}\n3. Supabase OAuth flow\n4. Provider authentication\n5. Redirect to /auth/callback\n6. Tokens exchanged\n7. Cookies set\n8. User redirected to dashboard\n</code></pre>"},{"location":"authentication/#api-endpoints","title":"\ud83d\udcca API Endpoints","text":""},{"location":"authentication/#authentication-apis","title":"Authentication APIs","text":""},{"location":"authentication/#post-apiauthsignup","title":"<code>POST /api/auth/signup</code>","text":"<p>Create new user account.</p> <p>Request: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\",\n  \"name\": \"User Name\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Account created successfully\",\n  \"user\": {\n    \"id\": \"uuid\",\n    \"email\": \"user@example.com\",\n    \"name\": \"User Name\"\n  }\n}\n</code></pre></p>"},{"location":"authentication/#post-apiauthsignin","title":"<code>POST /api/auth/signin</code>","text":"<p>Authenticate existing user.</p> <p>Request: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Signed in successfully\",\n  \"user\": {\n    \"id\": \"uuid\",\n    \"email\": \"user@example.com\",\n    \"name\": \"User Name\"\n  }\n}\n</code></pre></p>"},{"location":"authentication/#post-apiauthsignout","title":"<code>POST /api/auth/signout</code>","text":"<p>End user session.</p> <p>Response: <pre><code>{\n  \"message\": \"Signed out successfully\"\n}\n</code></pre></p>"},{"location":"authentication/#get-apiauthsession","title":"<code>GET /api/auth/session</code>","text":"<p>Get current session information.</p> <p>Response: <pre><code>{\n  \"user\": {\n    \"id\": \"uuid\",\n    \"email\": \"user@example.com\",\n    \"name\": \"User Name\",\n    \"avatarUrl\": \"https://...\"\n  }\n}\n</code></pre></p>"},{"location":"authentication/#password-reset-apis","title":"Password Reset APIs","text":""},{"location":"authentication/#post-apiauthreset-password","title":"<code>POST /api/auth/reset-password</code>","text":"<p>Send password reset email.</p> <p>Request: <pre><code>{\n  \"email\": \"user@example.com\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Password reset email sent\"\n}\n</code></pre></p>"},{"location":"authentication/#post-apiauthupdate-password","title":"<code>POST /api/auth/update-password</code>","text":"<p>Update password with reset tokens.</p> <p>Request: <pre><code>{\n  \"password\": \"newpassword\",\n  \"accessToken\": \"jwt_token\",\n  \"refreshToken\": \"refresh_token\"\n}\n</code></pre></p>"},{"location":"authentication/#oauth-apis","title":"OAuth APIs","text":""},{"location":"authentication/#get-apiauthgithub","title":"<code>GET /api/auth/github</code>","text":"<p>Initiate GitHub OAuth flow.</p>"},{"location":"authentication/#get-apiauthgoogle","title":"<code>GET /api/auth/google</code>","text":"<p>Initiate Google OAuth flow.</p>"},{"location":"authentication/#get-authcallback","title":"<code>GET /auth/callback</code>","text":"<p>Handle OAuth callback and token exchange.</p>"},{"location":"authentication/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"authentication/#supabase-setup","title":"Supabase Setup","text":"<ol> <li>Create Project: Supabase Dashboard</li> <li>Authentication Settings:</li> <li>Enable email confirmations (optional for development)</li> <li>Configure OAuth providers</li> <li> <p>Set up SMTP for emails</p> </li> <li> <p>Environment Variables: <pre><code>NEXT_PUBLIC_SUPABASE_URL=your_project_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_service_key\n</code></pre></p> </li> </ol>"},{"location":"authentication/#oauth-provider-setup","title":"OAuth Provider Setup","text":""},{"location":"authentication/#github-oauth","title":"GitHub OAuth","text":"<ol> <li>Go to GitHub Settings \u2192 Developer settings \u2192 OAuth Apps</li> <li>Create new OAuth App</li> <li>Set Authorization callback URL: <code>https://your-domain.com/auth/callback</code></li> <li>Add Client ID and Secret to Supabase</li> </ol>"},{"location":"authentication/#google-oauth","title":"Google OAuth","text":"<ol> <li>Go to Google Cloud Console</li> <li>Create OAuth 2.0 credentials</li> <li>Set redirect URI: <code>https://your-domain.com/auth/callback</code></li> <li>Add credentials to Supabase</li> </ol>"},{"location":"authentication/#security-best-practices","title":"\ud83d\udee1\ufe0f Security Best Practices","text":""},{"location":"authentication/#password-requirements","title":"Password Requirements","text":"<ul> <li>Minimum 6 characters</li> <li>No common passwords</li> <li>Regular password rotation encouraged</li> </ul>"},{"location":"authentication/#session-security","title":"Session Security","text":"<ul> <li>HTTP-only cookies prevent XSS</li> <li>Secure cookies in production (HTTPS only)</li> <li>SameSite=lax prevents CSRF</li> <li>Automatic token refresh</li> </ul>"},{"location":"authentication/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Supabase built-in rate limiting</li> <li>Additional API rate limiting</li> <li>Progressive delays on failed attempts</li> </ul>"},{"location":"authentication/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"authentication/#common-issues","title":"Common Issues","text":"<p>\"Invalid login credentials\" - Check email/password combination - Ensure account is confirmed (if email confirmation enabled) - Verify Supabase project settings</p> <p>\"OAuth provider not configured\" - Check OAuth app setup in provider dashboard - Verify callback URLs match - Ensure Supabase OAuth settings are correct</p> <p>\"Session expired\" - Automatic refresh should handle this - Check cookie settings - Verify token validity</p>"},{"location":"authentication/#debug-commands","title":"Debug Commands","text":"<pre><code># Check session\ncurl http://localhost:3000/api/auth/session\n\n# Test signup\ncurl -X POST http://localhost:3000/api/auth/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"test@test.com\",\"password\":\"test123\",\"name\":\"Test\"}'\n\n# Test signin\ncurl -X POST http://localhost:3000/api/auth/signin \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"test@test.com\",\"password\":\"test123\"}'\n</code></pre>"},{"location":"authentication/#user-lifecycle","title":"\ud83d\udd04 User Lifecycle","text":""},{"location":"authentication/#account-creation","title":"Account Creation","text":"<ol> <li>User registers \u2192 Supabase user created</li> <li>Profile record created in database</li> <li>Welcome email sent (if configured)</li> <li>User can immediately sign in</li> </ol>"},{"location":"authentication/#account-management","title":"Account Management","text":"<ul> <li>Profile updates via <code>/api/profile</code></li> <li>Password changes via reset flow</li> <li>Account deletion (future feature)</li> </ul>"},{"location":"authentication/#session-handling","title":"Session Handling","text":"<ul> <li>Automatic login persistence</li> <li>Cross-tab session sync</li> <li>Secure logout with cleanup</li> </ul>"},{"location":"authentication/#advanced-features","title":"\ud83d\ude80 Advanced Features","text":""},{"location":"authentication/#custom-claims","title":"Custom Claims","text":"<ul> <li>Role-based access control (future)</li> <li>Feature flags per user</li> <li>Subscription tiers</li> </ul>"},{"location":"authentication/#multi-tenancy","title":"Multi-tenancy","text":"<ul> <li>Organization support (planned)</li> <li>Team collaboration features</li> <li>Shared workspaces</li> </ul>"},{"location":"authentication/#audit-logging","title":"Audit Logging","text":"<ul> <li>Authentication events</li> <li>Security incidents</li> <li>User activity tracking</li> </ul> <p>For implementation details, see the API documentation and architecture overview.</p>"},{"location":"backlog/","title":"\ud83d\ude80 Open Idea Backlog","text":"<p>Generated by comprehensive workspace analysis - September 18, 2025</p>"},{"location":"backlog/#analysis-summary","title":"\ud83d\udcca Analysis Summary","text":"<p>Current State: Advanced Next.js workspace application with federated search, workspace management, and community features.</p> <p>Tech Stack: Next.js 15, Prisma + SQLite, Tailwind CSS, Framer Motion, Sonner toasts, Lucide icons</p> <p>Key Features: Workspace CRUD, resource management, share links, federated search across multiple sources, email integration</p>"},{"location":"backlog/#high-priority-tasks","title":"\ud83c\udfaf High Priority Tasks","text":""},{"location":"backlog/#bug-fixes-error-handling","title":"\ud83d\udd27 Bug Fixes &amp; Error Handling","text":"<ul> <li>[ ] Console Error Cleanup: Remove all <code>console.error/warn</code> statements from production code (20+ instances found)</li> <li>[ ] EmailJS Integration: Fix missing <code>NEXT_PUBLIC_EMAILJS_PUBLIC_KEY</code> environment variable</li> <li>[ ] API Error Boundaries: Add proper error boundaries for API failures across all components</li> <li>[ ] Loading States: Fix inconsistent loading states in search and resource operations</li> </ul>"},{"location":"backlog/#feature-completions","title":"\ud83d\ude80 Feature Completions","text":"<ul> <li>[ ] Summarize Functionality: Implement the disabled \"Summarize\" button in search results (<code>app/search/page.tsx:139</code>)</li> <li>[ ] Save to Workspace in Open Resources: Add SaveToWorkspace component to <code>app/openresources/page.tsx</code> (currently disabled)</li> <li>[ ] Annotation System: Complete the \"Add Annotation\" functionality in ResourceCard (currently just a link)</li> <li>[ ] Share Link Revocation: Add DELETE/revoke functionality for share links in ShareLinksPanel</li> </ul>"},{"location":"backlog/#uiux-improvements","title":"\ud83c\udfa8 UI/UX Improvements","text":"<ul> <li>[ ] Mobile Responsiveness: Audit and fix mobile compatibility issues (mentioned in TODO.md)</li> <li>[ ] Accessibility: Add proper ARIA labels, keyboard navigation, and screen reader support</li> <li>[ ] Loading Skeletons: Add skeleton loaders for all async operations</li> <li>[ ] Empty States: Improve empty state messaging across all components</li> </ul>"},{"location":"backlog/#medium-priority-tasks","title":"\u2728 Medium Priority Tasks","text":""},{"location":"backlog/#search-discovery","title":"\ud83d\udd0d Search &amp; Discovery","text":"<ul> <li>[ ] Advanced Search Filters: Add date ranges, author filters, citation counts</li> <li>[ ] Search History: Implement recent searches and saved searches</li> <li>[ ] Search Result Caching: Add client-side caching for search results</li> <li>[ ] Export Search Results: Add CSV/JSON export functionality</li> </ul>"},{"location":"backlog/#workspace-management","title":"\ud83d\udcc1 Workspace Management","text":"<ul> <li>[ ] Workspace Templates: Create predefined workspace templates for different use cases</li> <li>[ ] Bulk Operations: Add bulk delete/move operations for resources</li> <li>[ ] Workspace Analytics: Add usage statistics and insights</li> <li>[ ] Resource Tagging: Implement a proper tagging system with autocomplete</li> </ul>"},{"location":"backlog/#integrations","title":"\ud83d\udd17 Integrations","text":"<ul> <li>[ ] OAuth Integration: Add GitHub/Google OAuth for better user experience</li> <li>[ ] API Rate Limiting: Implement proper rate limiting for search APIs</li> <li>[ ] Webhook Support: Add webhooks for workspace events</li> <li>[ ] Export/Import: Add workspace export/import functionality</li> </ul>"},{"location":"backlog/#mobile-pwa","title":"\ud83d\udcf1 Mobile &amp; PWA","text":"<ul> <li>[ ] PWA Support: Add service worker and manifest for PWA functionality</li> <li>[ ] Offline Mode: Implement offline resource access</li> <li>[ ] Touch Gestures: Add swipe gestures for mobile interactions</li> <li>[ ] Push Notifications: Add push notifications for workspace updates</li> </ul>"},{"location":"backlog/#backlog-future-features","title":"\ud83d\ude80 Backlog / Future Features","text":""},{"location":"backlog/#ai-ml-features","title":"\ud83e\udd16 AI &amp; ML Features","text":"<ul> <li>[ ] Smart Summarization: Implement local AI summarization (currently stubbed)</li> <li>[ ] Content Recommendations: AI-powered resource recommendations</li> <li>[ ] Auto-tagging: Automatic resource categorization</li> <li>[ ] Duplicate Detection: AI-powered duplicate resource detection</li> </ul>"},{"location":"backlog/#social-features","title":"\ud83c\udf10 Social Features","text":"<ul> <li>[ ] Collaboration: Real-time collaborative editing of workspaces</li> <li>[ ] Comments System: Add comments to resources and workspaces</li> <li>[ ] User Profiles: Create user profile pages with contribution history</li> <li>[ ] Following System: Allow users to follow workspaces and researchers</li> </ul>"},{"location":"backlog/#analytics-insights","title":"\ud83d\udcca Analytics &amp; Insights","text":"<ul> <li>[ ] Usage Analytics: Track user behavior and feature usage</li> <li>[ ] Content Analytics: Analyze resource popularity and engagement</li> <li>[ ] Search Analytics: Track search patterns and popular queries</li> <li>[ ] Performance Monitoring: Add performance metrics and error tracking</li> </ul>"},{"location":"backlog/#developer-experience","title":"\ud83d\udd27 Developer Experience","text":"<ul> <li>[ ] Testing Suite: Add comprehensive unit and integration tests</li> <li>[ ] Storybook: Create component library documentation</li> <li>[ ] CI/CD Pipeline: Set up automated testing and deployment</li> <li>[ ] API Documentation: Generate OpenAPI/Swagger documentation</li> </ul>"},{"location":"backlog/#task-categories","title":"\ud83c\udff7\ufe0f Task Categories","text":""},{"location":"backlog/#frontend-tasks","title":"Frontend Tasks","text":"<ul> <li>UI component development and styling</li> <li>Client-side state management</li> <li>User interaction improvements</li> <li>Responsive design fixes</li> </ul>"},{"location":"backlog/#backend-tasks","title":"Backend Tasks","text":"<ul> <li>API endpoint development</li> <li>Database schema optimization</li> <li>Authentication and authorization</li> <li>Performance optimization</li> </ul>"},{"location":"backlog/#devops-tasks","title":"DevOps Tasks","text":"<ul> <li>Infrastructure setup and monitoring</li> <li>CI/CD pipeline configuration</li> <li>Security hardening</li> <li>Performance monitoring</li> </ul>"},{"location":"backlog/#product-tasks","title":"Product Tasks","text":"<ul> <li>Feature planning and prioritization</li> <li>User research and feedback analysis</li> <li>Content creation and curation</li> <li>Community building</li> </ul>"},{"location":"backlog/#codex-chatgpt-task-assignments","title":"\ud83e\udd16 Codex (ChatGPT) Task Assignments","text":"<p>Based on the codebase analysis, here are recommended tasks for Codex to handle:</p>"},{"location":"backlog/#high-priority-codex-tasks","title":"High Priority Codex Tasks:","text":"<ol> <li>Complete Annotation System: Implement the full annotation CRUD functionality</li> <li>Add Summarize Feature: Build the summarization feature using local AI models</li> <li>Fix Mobile Responsiveness: Audit and fix all mobile layout issues</li> <li>Implement Error Boundaries: Add React error boundaries throughout the app</li> </ol>"},{"location":"backlog/#medium-priority-codex-tasks","title":"Medium Priority Codex Tasks:","text":"<ol> <li>Build Testing Suite: Create unit tests for components and API routes</li> <li>Add PWA Support: Implement service worker and PWA functionality</li> <li>Create Component Library: Build reusable component documentation</li> <li>Implement Advanced Search: Add filters, sorting, and search history</li> </ol>"},{"location":"backlog/#low-priority-codex-tasks","title":"Low Priority Codex Tasks:","text":"<ol> <li>Add Analytics: Implement user behavior tracking</li> <li>Build Admin Dashboard: Create admin interface for content management</li> <li>Add Internationalization: Implement multi-language support</li> <li>Create API Documentation: Generate comprehensive API docs</li> </ol>"},{"location":"backlog/#metrics-kpis","title":"\ud83d\udcc8 Metrics &amp; KPIs","text":"<p>Current Status: - \u2705 Workspace CRUD: Complete - \u2705 Resource Management: Complete - \u2705 Share Links: Complete - \u2705 Federated Search: Complete - \u2705 Email Integration: Partial - \ud83d\udd04 UI Polish: In Progress - \u274c Testing: Missing - \u274c Mobile: Needs Work - \u274c PWA: Missing</p> <p>Success Metrics: - Page load time &lt; 2s - Mobile usability score &gt; 90 - Test coverage &gt; 80% - User engagement (to be defined)</p>"},{"location":"backlog/#next-sprint-focus","title":"\ud83c\udfaf Next Sprint Focus","text":"<p>Sprint Goal: Polish the core workspace functionality and prepare for beta launch</p> <p>Key Deliverables: 1. Complete annotation system 2. Mobile responsiveness fixes 3. Error handling improvements 4. Basic testing suite 5. Performance optimizations</p> <p>Success Criteria: - All console errors resolved - Mobile usability score &gt; 85 - Core user flows working smoothly - Basic test coverage established /Users/sonyyadav/Desktop/openIdeaFrontend/Ecosyz/backlog.md"},{"location":"contributing/","title":"Contributing to Ecosyz","text":"<p>Thank you for your interest in contributing to Ecosyz! This document provides guidelines and information for contributors.</p>"},{"location":"contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18+</li> <li>pnpm package manager</li> <li>Git</li> <li>Supabase account (for full development)</li> </ul>"},{"location":"contributing/#setup","title":"Setup","text":"<ol> <li> <p>Fork and Clone <pre><code>git clone https://github.com/your-username/Ecosyz.git\ncd Ecosyz\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Environment Setup <pre><code>cp .env.example .env.local\n# Edit .env.local with your configuration\n</code></pre></p> </li> <li> <p>Database Setup <pre><code>npx prisma generate\nnpx prisma db push\n</code></pre></p> </li> <li> <p>Start Development <pre><code>pnpm dev\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"\ud83d\udccb Development Workflow","text":""},{"location":"contributing/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code> - Production-ready code</li> <li><code>develop</code> - Integration branch</li> <li><code>feature/*</code> - New features</li> <li><code>bugfix/*</code> - Bug fixes</li> <li><code>hotfix/*</code> - Critical fixes</li> </ul>"},{"location":"contributing/#commit-convention","title":"Commit Convention","text":"<pre><code>type(scope): description\n\n# Examples:\nfeat(auth): add Google OAuth support\nfix(api): resolve profile update error\ndocs(readme): update installation instructions\nrefactor(db): optimize query performance\n</code></pre> <p>Types: - <code>feat</code> - New features - <code>fix</code> - Bug fixes - <code>docs</code> - Documentation - <code>style</code> - Code style changes - <code>refactor</code> - Code refactoring - <code>test</code> - Testing - <code>chore</code> - Maintenance</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create Feature Branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make Changes</p> </li> <li>Write clean, readable code</li> <li>Add tests for new features</li> <li>Update documentation</li> <li> <p>Follow existing code style</p> </li> <li> <p>Test Your Changes <pre><code># Run all checks\npnpm lint\npnpx tsc --noEmit\npnpm test\n\n# Manual testing\npnpm dev\n</code></pre></p> </li> <li> <p>Commit Changes <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> <li> <p>Push and Create PR <pre><code>git push origin feature/your-feature-name\n# Create PR on GitHub\n</code></pre></p> </li> </ol>"},{"location":"contributing/#code-quality-standards","title":"\ud83d\udee0\ufe0f Code Quality Standards","text":""},{"location":"contributing/#typescript","title":"TypeScript","text":"<ul> <li>Strict Mode: All TypeScript rules enabled</li> <li>Type Safety: Avoid <code>any</code> types, use proper interfaces</li> <li>Imports: Use absolute imports with <code>@/</code> prefix</li> </ul>"},{"location":"contributing/#reactnextjs","title":"React/Next.js","text":"<ul> <li>App Router: Use new App Router patterns</li> <li>Server Components: Prefer server components when possible</li> <li>Client Components: Use <code>'use client'</code> directive when needed</li> <li>Data Fetching: Use server actions or API routes</li> </ul>"},{"location":"contributing/#styling","title":"Styling","text":"<ul> <li>Tailwind CSS: Use utility classes</li> <li>Design System: Follow established design patterns</li> <li>Responsive: Mobile-first approach</li> <li>Accessibility: ARIA labels, keyboard navigation</li> </ul>"},{"location":"contributing/#code-style","title":"Code Style","text":"<pre><code>// \u2705 Good\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nconst getUser = async (id: string): Promise&lt;User&gt; =&gt; {\n  const user = await prisma.user.findUnique({ where: { id } });\n  if (!user) throw new Error('User not found');\n  return user;\n};\n\n// \u274c Avoid\nconst getuser = (id) =&gt; {\n  return prisma.user.findUnique({where:{id}})\n}\n</code></pre>"},{"location":"contributing/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"contributing/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit Tests: Component and utility function testing</li> <li>Integration Tests: API route testing</li> <li>E2E Tests: Critical user journey testing</li> </ul>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npnpm test\n\n# Run with coverage\npnpm test -- --coverage\n\n# Run specific test\npnpm test -- component-name.test.ts\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<pre><code>// Component test example\nimport { render, screen } from '@testing-library/react';\nimport UserProfile from './UserProfile';\n\ndescribe('UserProfile', () =&gt; {\n  it('displays user name', () =&gt; {\n    render(&lt;UserProfile user={{ name: 'John Doe' }} /&gt;);\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n  });\n});\n</code></pre>"},{"location":"contributing/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>Functions: JSDoc comments for complex functions</li> <li>Components: Prop types and usage examples</li> <li>APIs: OpenAPI/Swagger documentation</li> </ul>"},{"location":"contributing/#project-documentation","title":"Project Documentation","text":"<ul> <li>README: Keep updated with setup instructions</li> <li>API Docs: Document all endpoints</li> <li>Architecture: Update for major changes</li> </ul>"},{"location":"contributing/#security","title":"\ud83d\udd12 Security","text":""},{"location":"contributing/#security-checklist","title":"Security Checklist","text":"<ul> <li>[ ] No sensitive data in logs</li> <li>[ ] Input validation on all forms</li> <li>[ ] SQL injection prevention</li> <li>[ ] XSS protection</li> <li>[ ] CSRF protection</li> <li>[ ] Secure headers</li> <li>[ ] Dependency updates</li> </ul>"},{"location":"contributing/#reporting-security-issues","title":"Reporting Security Issues","text":"<ul> <li>DO NOT create public issues for security vulnerabilities</li> <li>Email security concerns to: security@ecosyz.com</li> <li>Use GitHub Security Advisories for coordinated disclosure</li> </ul>"},{"location":"contributing/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"contributing/#environment-variables","title":"Environment Variables","text":"<p>Required for all environments: <pre><code>NEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\nSUPABASE_SERVICE_ROLE_KEY=\nDATABASE_URL=\n</code></pre></p> <p>Production only: <pre><code>NEXT_PUBLIC_BASE_URL=https://ecosyz.vercel.app\nSENTRY_DSN= # Error tracking\n</code></pre></p>"},{"location":"contributing/#deployment-checklist","title":"Deployment Checklist","text":"<ul> <li>[ ] All tests pass</li> <li>[ ] Linting passes</li> <li>[ ] Type checking passes</li> <li>[ ] Build succeeds</li> <li>[ ] Environment variables set</li> <li>[ ] Database migrations applied</li> <li>[ ] Feature flags configured</li> </ul>"},{"location":"contributing/#code-review-guidelines","title":"\ud83e\udd1d Code Review Guidelines","text":""},{"location":"contributing/#for-reviewers","title":"For Reviewers","text":"<ul> <li>Be constructive: Focus on code quality and learning</li> <li>Explain reasoning: Why changes are needed</li> <li>Suggest alternatives: When rejecting approaches</li> <li>Approve readily: When standards are met</li> </ul>"},{"location":"contributing/#for-contributors","title":"For Contributors","text":"<ul> <li>Address feedback: Respond to all review comments</li> <li>Explain decisions: Document architectural choices</li> <li>Test thoroughly: Ensure changes don't break existing functionality</li> <li>Keep scope small: Large PRs are harder to review</li> </ul>"},{"location":"contributing/#issue-tracking","title":"\ud83d\udccb Issue Tracking","text":""},{"location":"contributing/#issue-labels","title":"Issue Labels","text":"<ul> <li><code>bug</code> - Something isn't working</li> <li><code>enhancement</code> - New feature or improvement</li> <li><code>documentation</code> - Documentation updates</li> <li><code>good first issue</code> - Ideal for newcomers</li> <li><code>help wanted</code> - Extra attention needed</li> </ul>"},{"location":"contributing/#issue-templates","title":"Issue Templates","text":"<ul> <li>Bug Report: Includes reproduction steps</li> <li>Feature Request: Describes desired functionality</li> <li>Documentation: For docs improvements</li> </ul>"},{"location":"contributing/#contributing-areas","title":"\ud83c\udfaf Contributing Areas","text":""},{"location":"contributing/#high-priority","title":"High Priority","text":"<ul> <li>Authentication: OAuth providers, security improvements</li> <li>Search Engine: New data sources, improved ranking</li> <li>AI Features: Better summarization, new capabilities</li> <li>Performance: Optimization and caching</li> </ul>"},{"location":"contributing/#good-for-beginners","title":"Good for Beginners","text":"<ul> <li>UI Components: New components following design system</li> <li>Documentation: Writing guides and examples</li> <li>Testing: Adding test coverage</li> <li>Bug Fixes: Resolving reported issues</li> </ul>"},{"location":"contributing/#advanced","title":"Advanced","text":"<ul> <li>Database: Schema optimization, new features</li> <li>API Design: New endpoints, GraphQL migration</li> <li>Infrastructure: Deployment, monitoring, scaling</li> </ul>"},{"location":"contributing/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and ideas</li> <li>Discord: Real-time chat (if available)</li> </ul>"},{"location":"contributing/#finding-help","title":"Finding Help","text":"<ol> <li>Check existing issues - Your issue might already be reported</li> <li>Search documentation - Many questions are answered in docs</li> <li>Create minimal reproduction - For bug reports</li> <li>Ask in discussions - For questions and ideas</li> </ol>"},{"location":"contributing/#recognition","title":"\ud83d\ude4f Recognition","text":"<p>Contributors are recognized through: - GitHub Contributors list - Changelog entries - Social media mentions - Community shoutouts</p>"},{"location":"contributing/#license","title":"\ud83d\udcc4 License","text":"<p>By contributing to Ecosyz, you agree that your contributions will be licensed under the same license as the project.</p> <p>Thank you for contributing to Ecosyz! Your efforts help make academic research more accessible and collaborative. \ud83d\ude80</p>"},{"location":"database-connections/","title":"Database Connections and Migrations Guide","text":""},{"location":"database-connections/#database-urls-in-supabase","title":"Database URLs in Supabase","text":"<p>We use two different database connection URLs for different purposes:</p>"},{"location":"database-connections/#1-pooled-connection-database_url","title":"1. Pooled Connection (DATABASE_URL)","text":"<pre><code>postgresql://postgres.ltenyoiaydemsnrvdbpc:[PASSWORD]@aws-1-ap-south-1.pooler.supabase.com:6543/postgres?pgbouncer=true\n</code></pre> <p>Used for: - Regular application queries - Normal CRUD operations - High-concurrency operations - Production environment</p> <p>Why: - Manages connection pooling efficiently - Better handles multiple simultaneous connections - Prevents database connection exhaustion - Optimal for serverless environments</p>"},{"location":"database-connections/#2-direct-connection-direct_url","title":"2. Direct Connection (DIRECT_URL)","text":"<pre><code>postgresql://postgres:[PASSWORD]@db.ltenyoiaydemsnrvdbpc.supabase.co:5432/postgres\n</code></pre> <p>Used for: - Database migrations - Schema changes - Prisma Studio - Development tools</p> <p>Why: - Bypasses connection pooling - Required for operations that need direct database access - Necessary for schema migrations - Supports long-lived connections</p>"},{"location":"database-connections/#database-migration-commands","title":"Database Migration Commands","text":""},{"location":"database-connections/#1-create-a-new-migration","title":"1. Create a New Migration","text":"<p><pre><code>npx prisma migrate dev --name your_migration_name\n</code></pre> - Creates a new migration file - Applies the migration to your database - Regenerates Prisma Client</p>"},{"location":"database-connections/#2-reset-database-development-only","title":"2. Reset Database (Development Only)","text":"<p><pre><code>npx prisma migrate reset --force\n</code></pre> - Drops all tables and data - Reapplies all migrations - Seeds the database (if configured)</p>"},{"location":"database-connections/#3-apply-migrations-production","title":"3. Apply Migrations (Production)","text":"<p><pre><code>npx prisma migrate deploy\n</code></pre> - Applies pending migrations - Safe for production use - Doesn't reset or modify existing data</p>"},{"location":"database-connections/#4-view-database-in-prisma-studio","title":"4. View Database in Prisma Studio","text":"<p><pre><code>npx prisma studio\n</code></pre> - Opens web interface at http://localhost:5555 - Uses DIRECT_URL connection - Great for data visualization and management</p>"},{"location":"database-connections/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Connection Pooling Errors</li> <li> <p>If you see \"Too many connections\" error, ensure you're using the pooled URL for app queries</p> </li> <li> <p>Migration Failures</p> </li> <li>Always use DIRECT_URL for migrations</li> <li>Reset database if in development</li> <li> <p>Check foreign key constraints</p> </li> <li> <p>Prisma Studio Connection Issues</p> </li> <li>Verify DIRECT_URL is correctly configured</li> <li>Check if database is accessible</li> <li>Ensure proper permissions</li> </ol>"},{"location":"database-connections/#environment-setup","title":"Environment Setup","text":"<ol> <li> <p>Create <code>.env</code> file with both URLs: <pre><code>DATABASE_URL=\"[pooled-connection-url]\"\nDIRECT_URL=\"[direct-connection-url]\"\n</code></pre></p> </li> <li> <p>Update <code>schema.prisma</code>: <pre><code>datasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n</code></pre></p> </li> </ol>"},{"location":"database-connections/#best-practices","title":"Best Practices","text":"<ol> <li>Version Control</li> <li>Commit migration files</li> <li>Don't commit <code>.env</code> files</li> <li> <p>Maintain <code>.env.example</code></p> </li> <li> <p>Development Workflow</p> </li> <li>Use <code>migrate dev</code> during development</li> <li>Test migrations locally first</li> <li> <p>Keep migrations small and focused</p> </li> <li> <p>Production Deployments</p> </li> <li>Always backup before migrations</li> <li>Use <code>migrate deploy</code> in production</li> <li> <p>Never use <code>reset</code> in production</p> </li> <li> <p>Connection Management</p> </li> <li>Use pooled connections for regular operations</li> <li>Use direct connections for admin tasks</li> <li>Monitor connection limits</li> </ol>"},{"location":"database-connections/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check connection strings</li> <li>Verify database permissions</li> <li>Ensure proper environment variables</li> <li>Review migration history</li> <li>Check Prisma logs</li> </ol> <p>For more detailed information: - Prisma Migrations - Supabase Connection Pooling - Database Connection Issues</p>"},{"location":"database-schema/","title":"Database Schema","text":"<p>This document describes the Ecosyz database schema, relationships, and data models.</p>"},{"location":"database-schema/#database-overview","title":"\ud83d\uddc4\ufe0f Database Overview","text":"<p>Ecosyz uses PostgreSQL as the primary database, managed through Supabase with Prisma ORM for type-safe database operations.</p>"},{"location":"database-schema/#technology-stack","title":"Technology Stack","text":"<ul> <li>Database: PostgreSQL 15</li> <li>ORM: Prisma</li> <li>Hosting: Supabase</li> <li>Migration: Prisma Migrate</li> <li>Studio: Prisma Studio for development</li> </ul>"},{"location":"database-schema/#schema-models","title":"\ud83d\udcca Schema Models","text":""},{"location":"database-schema/#user-model","title":"User Model","text":"<pre><code>model User {\n  id            String      @id @default(cuid())\n  supabaseId    String      @unique\n  email         String      @unique\n  name          String?\n  avatarUrl     String?\n  createdAt     DateTime    @default(now())\n  updatedAt     DateTime    @updatedAt\n  workspaces    Workspace[]\n  profile       Profile?\n}\n</code></pre> <p>Relationships: - One-to-many with <code>Workspace</code> - One-to-one with <code>Profile</code></p> <p>Usage: - Core user identity from Supabase Auth - Extended with app-specific data - Used for authorization and personalization</p>"},{"location":"database-schema/#profile-model","title":"Profile Model","text":"<pre><code>model Profile {\n  id          String   @id @default(cuid())\n  userId      String   @unique\n  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  displayName String?\n  bio         String?  @db.Text\n  avatarUrl   String?\n  preferences Json?    // Flexible preferences object\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n</code></pre> <p>Preferences Structure: <pre><code>{\n  \"theme\": \"system\" | \"light\" | \"dark\",\n  \"language\": \"en-IN\",\n  \"emailNotifications\": true,\n  \"marketingEmails\": false\n}\n</code></pre></p> <p>Usage: - Extended user profile information - User preferences and settings - Display information for UI</p>"},{"location":"database-schema/#workspace-model","title":"Workspace Model","text":"<pre><code>model Workspace {\n  id        String      @id @default(cuid())\n  title     String\n  ownerId   String\n  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  createdAt DateTime    @default(now())\n  resources Resource[]\n  shares    ShareLink[]\n}\n</code></pre> <p>Relationships: - Many-to-one with <code>User</code> (owner) - One-to-many with <code>Resource</code> - One-to-many with <code>ShareLink</code></p> <p>Usage: - User's research projects/organizations - Container for related resources - Collaboration spaces</p>"},{"location":"database-schema/#resource-model","title":"Resource Model","text":"<pre><code>model Resource {\n  id          String      @id @default(cuid())\n  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)\n  workspaceId String\n  title       String\n  url         String?\n  type        String?     // \"paper\", \"article\", \"video\", etc.\n  tags        Json?       // Array of tag strings\n  data        Json?       // Flexible metadata storage\n  createdAt   DateTime    @default(now())\n  annotations Annotation[]\n}\n</code></pre> <p>Data Structure Examples:</p> <p>Academic Paper: <pre><code>{\n  \"authors\": [\"Smith, J.\", \"Doe, A.\"],\n  \"year\": 2024,\n  \"journal\": \"Nature\",\n  \"doi\": \"10.1038/nature12345\",\n  \"abstract\": \"...\",\n  \"citations\": 150\n}\n</code></pre></p> <p>Web Article: <pre><code>{\n  \"source\": \"TechCrunch\",\n  \"author\": \"Jane Smith\",\n  \"publishedAt\": \"2024-01-15T10:30:00Z\",\n  \"readTime\": 5,\n  \"category\": \"AI\"\n}\n</code></pre></p> <p>Usage: - Research materials and references - Search results storage - User-curated content</p>"},{"location":"database-schema/#annotation-model","title":"Annotation Model","text":"<pre><code>model Annotation {\n  id         String   @id @default(cuid())\n  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)\n  resourceId String\n  body       String\n  highlights Json?    // Text selection data\n  createdAt  DateTime @default(now())\n}\n</code></pre> <p>Highlights Structure: <pre><code>{\n  \"text\": \"Selected text content\",\n  \"startOffset\": 150,\n  \"endOffset\": 200,\n  \"color\": \"#ffeb3b\"\n}\n</code></pre></p> <p>Usage: - User notes and comments - Text highlights and annotations - Research insights and observations</p>"},{"location":"database-schema/#sharelink-model","title":"ShareLink Model","text":"<pre><code>model ShareLink {\n  id          String    @id @default(cuid())\n  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)\n  workspaceId String\n  token       String    @unique\n  readOnly    Boolean   @default(true)\n  expiresAt   DateTime?\n  createdAt   DateTime  @default(now())\n}\n</code></pre> <p>Usage: - Public sharing of workspaces - Temporary access links - Collaboration features</p>"},{"location":"database-schema/#database-relationships","title":"\ud83d\udd17 Database Relationships","text":""},{"location":"database-schema/#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<pre><code>User (1) \u2500\u2500\u2500\u2500 (1) Profile\n  \u2502\n  \u2514\u2500\u2500 (\u221e) Workspace\n         \u2502\n         \u251c\u2500\u2500 (\u221e) Resource\n         \u2502      \u2502\n         \u2502      \u2514\u2500\u2500 (\u221e) Annotation\n         \u2502\n         \u2514\u2500\u2500 (\u221e) ShareLink\n</code></pre>"},{"location":"database-schema/#foreign-key-constraints","title":"Foreign Key Constraints","text":"<ul> <li>Cascade Delete: When user deleted \u2192 profile, workspaces, resources, annotations deleted</li> <li>Restrict Delete: Cannot delete workspace with existing resources</li> <li>Unique Constraints: Email uniqueness, Supabase ID uniqueness</li> </ul>"},{"location":"database-schema/#indexes-and-performance","title":"\ud83d\udd0d Indexes and Performance","text":""},{"location":"database-schema/#automatic-indexes","title":"Automatic Indexes","text":"<p>Prisma automatically creates indexes for: - Primary keys (<code>id</code>) - Foreign keys (<code>userId</code>, <code>workspaceId</code>, <code>resourceId</code>) - Unique constraints (<code>email</code>, <code>supabaseId</code>)</p>"},{"location":"database-schema/#recommended-additional-indexes","title":"Recommended Additional Indexes","text":"<pre><code>-- For user searches\nCREATE INDEX idx_user_email ON \"User\" (email);\nCREATE INDEX idx_user_name ON \"User\" (name);\n\n-- For workspace queries\nCREATE INDEX idx_workspace_owner ON \"Workspace\" (owner_id);\nCREATE INDEX idx_workspace_created ON \"Workspace\" (created_at DESC);\n\n-- For resource searches\nCREATE INDEX idx_resource_workspace ON \"Resource\" (workspace_id);\nCREATE INDEX idx_resource_type ON \"Resource\" (type);\nCREATE INDEX idx_resource_created ON \"Resource\" (created_at DESC);\n\n-- For full-text search\nCREATE INDEX idx_resource_title_fts ON \"Resource\" USING gin(to_tsvector('english', title));\nCREATE INDEX idx_resource_data_fts ON \"Resource\" USING gin(to_tsvector('english', data::text));\n</code></pre>"},{"location":"database-schema/#data-migration-strategy","title":"\ud83d\udd04 Data Migration Strategy","text":""},{"location":"database-schema/#migration-commands","title":"Migration Commands","text":"<pre><code># Create new migration\nnpx prisma migrate dev --name migration_name\n\n# Apply migrations\nnpx prisma migrate deploy\n\n# Reset database (development)\nnpx prisma migrate reset\n\n# Generate client\nnpx prisma generate\n</code></pre>"},{"location":"database-schema/#migration-best-practices","title":"Migration Best Practices","text":"<ol> <li>Descriptive Names: Use clear migration names</li> <li>Backward Compatible: Ensure migrations can be rolled back</li> <li>Data Safety: Backup before destructive changes</li> <li>Testing: Test migrations on staging environment</li> </ol>"},{"location":"database-schema/#database-operations","title":"\ud83d\udcca Database Operations","text":""},{"location":"database-schema/#common-queries","title":"Common Queries","text":"<p>Get User with Profile: <pre><code>const user = await prisma.user.findUnique({\n  where: { id: userId },\n  include: { profile: true }\n});\n</code></pre></p> <p>Get Workspace with Resources: <pre><code>const workspace = await prisma.workspace.findUnique({\n  where: { id: workspaceId },\n  include: {\n    resources: {\n      include: {\n        annotations: true\n      }\n    }\n  }\n});\n</code></pre></p> <p>Search Resources: <pre><code>const resources = await prisma.resource.findMany({\n  where: {\n    workspaceId: workspaceId,\n    OR: [\n      { title: { contains: query, mode: 'insensitive' } },\n      { data: { path: ['abstract'], string_contains: query } }\n    ]\n  }\n});\n</code></pre></p>"},{"location":"database-schema/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"database-schema/#row-level-security-rls","title":"Row Level Security (RLS)","text":"<p>Supabase RLS policies ensure users can only access their own data:</p> <pre><code>-- Users can only see their own profile\nCREATE POLICY \"Users can view own profile\" ON profiles\n  FOR SELECT USING (auth.uid() = user_id);\n\n-- Users can only modify their own workspaces\nCREATE POLICY \"Users can modify own workspaces\" ON workspaces\n  FOR ALL USING (auth.uid() = owner_id);\n</code></pre>"},{"location":"database-schema/#data-validation","title":"Data Validation","text":"<ul> <li>Application Level: Zod schemas validate input</li> <li>Database Level: Constraints and triggers</li> <li>API Level: Middleware validation</li> </ul>"},{"location":"database-schema/#scaling-considerations","title":"\ud83d\udcc8 Scaling Considerations","text":""},{"location":"database-schema/#current-limitations","title":"Current Limitations","text":"<ul> <li>Single Region: Currently single Supabase region</li> <li>Connection Pooling: Limited concurrent connections</li> <li>Storage: File storage in Supabase Storage</li> </ul>"},{"location":"database-schema/#future-improvements","title":"Future Improvements","text":"<ul> <li>Read Replicas: For read-heavy operations</li> <li>Sharding: By user or workspace</li> <li>Caching: Redis for frequent queries</li> <li>Archiving: Old data archiving strategy</li> </ul>"},{"location":"database-schema/#development-tools","title":"\ud83d\udee0\ufe0f Development Tools","text":""},{"location":"database-schema/#prisma-studio","title":"Prisma Studio","text":"<pre><code>npx prisma studio\n</code></pre> <p>Opens browser interface for database exploration and editing.</p>"},{"location":"database-schema/#database-url-configuration","title":"Database URL Configuration","text":"<pre><code># Development\nDATABASE_URL=\"postgresql://user:password@localhost:5432/ecosyz_dev\"\n\n# Production\nDATABASE_URL=\"postgresql://user:password@db.supabase.co:5432/postgres\"\nDIRECT_URL=\"postgresql://user:password@db.supabase.co:5432/postgres\"\n</code></pre>"},{"location":"database-schema/#seed-data","title":"Seed Data","text":"<pre><code>// prisma/seed.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Create sample data\n  const user = await prisma.user.create({\n    data: {\n      supabaseId: 'sample-uuid',\n      email: 'user@example.com',\n      name: 'Sample User',\n      profile: {\n        create: {\n          displayName: 'Sample User',\n          preferences: {\n            theme: 'system',\n            language: 'en-IN'\n          }\n        }\n      }\n    }\n  });\n}\n\nmain()\n  .catch((e) =&gt; console.error(e))\n  .finally(() =&gt; prisma.$disconnect());\n</code></pre>"},{"location":"database-schema/#maintenance","title":"\ud83d\udd27 Maintenance","text":""},{"location":"database-schema/#regular-tasks","title":"Regular Tasks","text":"<ul> <li>Monitor Performance: Query execution times</li> <li>Update Indexes: Based on query patterns</li> <li>Clean Old Data: Archive unused resources</li> <li>Backup Verification: Regular backup testing</li> </ul>"},{"location":"database-schema/#troubleshooting","title":"Troubleshooting","text":"<p>Connection Issues: <pre><code># Test connection\nnpx prisma db push --preview-feature\n\n# Check migration status\nnpx prisma migrate status\n</code></pre></p> <p>Performance Issues: <pre><code># Analyze slow queries\nEXPLAIN ANALYZE SELECT * FROM resources WHERE workspace_id = $1;\n\n# Check index usage\nSELECT * FROM pg_stat_user_indexes;\n</code></pre></p> <p>For API usage examples, see the API documentation.</p>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide covers deploying Ecosyz to production environments.</p>"},{"location":"deployment/#quick-deploy","title":"\ud83d\ude80 Quick Deploy","text":""},{"location":"deployment/#vercel-recommended","title":"Vercel (Recommended)","text":"<ol> <li>Connect Repository</li> <li>Import project to Vercel</li> <li> <p>Connect GitHub repository</p> </li> <li> <p>Environment Variables <pre><code># Database\nDATABASE_URL=postgresql://...\n\n# Supabase\nNEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\nSUPABASE_SERVICE_ROLE_KEY=your-service-key\n\n# Auth\nNEXTAUTH_SECRET=your-secret-key\nNEXTAUTH_URL=https://your-domain.vercel.app\n\n# External APIs\nYOUTUBE_API_KEY=your-youtube-key\nEMAILJS_SERVICE_ID=your-emailjs-id\nEMAILJS_TEMPLATE_ID=your-template-id\nEMAILJS_PUBLIC_KEY=your-public-key\n</code></pre></p> </li> <li> <p>Build Settings</p> </li> <li>Build Command: <code>npm run build</code> or <code>pnpm build</code></li> <li>Output Directory: <code>.next</code></li> <li> <p>Install Command: <code>npm install</code> or <code>pnpm install</code></p> </li> <li> <p>Deploy</p> </li> <li>Push to main branch</li> <li>Vercel auto-deploys</li> <li>Check deployment logs</li> </ol>"},{"location":"deployment/#manual-deployment","title":"Manual Deployment","text":""},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18+</li> <li>PostgreSQL database</li> <li>Redis (optional, for caching)</li> <li>Domain name</li> </ul>"},{"location":"deployment/#build-process","title":"Build Process","text":"<pre><code># Install dependencies\npnpm install\n\n# Build application\npnpm build\n\n# Start production server\npnpm start\n</code></pre>"},{"location":"deployment/#infrastructure-setup","title":"\ud83c\udfd7\ufe0f Infrastructure Setup","text":""},{"location":"deployment/#database","title":"Database","text":""},{"location":"deployment/#supabase-recommended","title":"Supabase (Recommended)","text":"<ol> <li> <p>Create Project <pre><code># Install Supabase CLI\nnpm install -g supabase\n\n# Initialize project\nsupabase init\n\n# Link to remote project\nsupabase link --project-ref your-project-ref\n</code></pre></p> </li> <li> <p>Database Schema <pre><code># Push schema changes\nnpx prisma db push\n\n# Generate client\nnpx prisma generate\n</code></pre></p> </li> <li> <p>Migrations <pre><code># Create migration\nnpx prisma migrate dev --name migration-name\n\n# Apply to production\nnpx prisma migrate deploy\n</code></pre></p> </li> </ol>"},{"location":"deployment/#postgresql-self-hosted","title":"PostgreSQL (Self-hosted)","text":"<pre><code>-- Create database\nCREATE DATABASE ecosyz;\n\n-- Create user\nCREATE USER ecosyz_user WITH PASSWORD 'secure-password';\n\n-- Grant permissions\nGRANT ALL PRIVILEGES ON DATABASE ecosyz TO ecosyz_user;\n</code></pre>"},{"location":"deployment/#file-storage","title":"File Storage","text":""},{"location":"deployment/#supabase-storage","title":"Supabase Storage","text":"<pre><code>// Configure storage bucket\nconst { data, error } = await supabase.storage.createBucket('documents', {\n  public: false,\n  allowedMimeTypes: ['application/pdf', 'text/plain'],\n  fileSizeLimit: 10485760 // 10MB\n});\n</code></pre>"},{"location":"deployment/#aws-s3-alternative","title":"AWS S3 (Alternative)","text":"<pre><code>import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION,\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  },\n});\n</code></pre>"},{"location":"deployment/#environment-configuration","title":"\ud83d\udd27 Environment Configuration","text":""},{"location":"deployment/#environment-variables","title":"Environment Variables","text":""},{"location":"deployment/#required-variables","title":"Required Variables","text":"<pre><code># Database\nDATABASE_URL=postgresql://user:password@host:5432/ecosyz\n\n# Supabase\nNEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\nSUPABASE_SERVICE_ROLE_KEY=your-service-key\n\n# Authentication\nNEXTAUTH_SECRET=your-32-char-secret\nNEXTAUTH_URL=https://your-domain.com\n\n# External Services\nYOUTUBE_API_KEY=AIzaSy...\nEMAILJS_SERVICE_ID=service_...\nEMAILJS_TEMPLATE_ID=template_...\nEMAILJS_PUBLIC_KEY=public_...\n\n# Redis (Optional)\nREDIS_URL=redis://localhost:6379\n</code></pre>"},{"location":"deployment/#environment-specific-config","title":"Environment-Specific Config","text":"<pre><code>// lib/config.ts\nexport const config = {\n  database: {\n    url: process.env.DATABASE_URL,\n  },\n  supabase: {\n    url: process.env.NEXT_PUBLIC_SUPABASE_URL,\n    anonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    serviceKey: process.env.SUPABASE_SERVICE_ROLE_KEY,\n  },\n  auth: {\n    secret: process.env.NEXTAUTH_SECRET,\n    url: process.env.NEXTAUTH_URL,\n  },\n  isProduction: process.env.NODE_ENV === 'production',\n  isDevelopment: process.env.NODE_ENV === 'development',\n};\n</code></pre>"},{"location":"deployment/#monitoring-analytics","title":"\ud83d\udcca Monitoring &amp; Analytics","text":""},{"location":"deployment/#error-tracking","title":"Error Tracking","text":""},{"location":"deployment/#sentry","title":"Sentry","text":"<pre><code>// pages/_app.tsx or app/layout.tsx\nimport * as Sentry from '@sentry/nextjs';\n\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  tracesSampleRate: 1.0,\n});\n</code></pre>"},{"location":"deployment/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"deployment/#vercel-analytics","title":"Vercel Analytics","text":"<pre><code>// app/layout.tsx\nimport { Analytics } from '@vercel/analytics/react';\n\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html&gt;\n      &lt;body&gt;\n        {children}\n        &lt;Analytics /&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n</code></pre>"},{"location":"deployment/#logging","title":"Logging","text":""},{"location":"deployment/#winston-logger","title":"Winston Logger","text":"<pre><code>// lib/logger.ts\nimport winston from 'winston';\n\nexport const logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n</code></pre>"},{"location":"deployment/#security","title":"\ud83d\udd12 Security","text":""},{"location":"deployment/#security-headers","title":"Security Headers","text":"<pre><code>// next.config.js\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'origin-when-cross-origin',\n          },\n        ],\n      },\n    ];\n  },\n};\n</code></pre>"},{"location":"deployment/#https-configuration","title":"HTTPS Configuration","text":"<pre><code>// next.config.js\nmodule.exports = {\n  // Force HTTPS in production\n  ...(process.env.NODE_ENV === 'production' &amp;&amp; {\n    headers: [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Strict-Transport-Security',\n            value: 'max-age=63072000; includeSubDomains; preload',\n          },\n        ],\n      },\n    ],\n  }),\n};\n</code></pre>"},{"location":"deployment/#cicd-pipeline","title":"\ud83d\ude80 CI/CD Pipeline","text":""},{"location":"deployment/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'pnpm'\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Run tests\n        run: pnpm test\n\n      - name: Type check\n        run: pnpm type-check\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'pnpm'\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Build\n        run: pnpm build\n\n      - name: Deploy to Vercel\n        uses: amondnet/vercel-action@v25\n        with:\n          vercel-token: ${{ secrets.VERCEL_TOKEN }}\n          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}\n          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}\n</code></pre>"},{"location":"deployment/#scaling","title":"\ud83d\udcc8 Scaling","text":""},{"location":"deployment/#database-optimization","title":"Database Optimization","text":"<pre><code>-- Add indexes for performance\nCREATE INDEX CONCURRENTLY idx_resources_title ON resources USING gin(to_tsvector('english', title));\nCREATE INDEX CONCURRENTLY idx_resources_created_at ON resources(created_at DESC);\n\n-- Partition large tables\nCREATE TABLE resources_y2024 PARTITION OF resources\n    FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');\n</code></pre>"},{"location":"deployment/#caching-strategy","title":"Caching Strategy","text":"<pre><code>// lib/cache.ts\nimport { Redis } from '@upstash/redis';\n\nexport const redis = new Redis({\n  url: process.env.REDIS_URL,\n  token: process.env.REDIS_TOKEN,\n});\n\nexport const cache = {\n  async get(key: string) {\n    const data = await redis.get(key);\n    return data ? JSON.parse(data) : null;\n  },\n\n  async set(key: string, data: any, ttl = 3600) {\n    await redis.setex(key, ttl, JSON.stringify(data));\n  },\n};\n</code></pre>"},{"location":"deployment/#cdn-configuration","title":"CDN Configuration","text":"<pre><code>// next.config.js\nmodule.exports = {\n  images: {\n    domains: ['your-cdn-domain.com'],\n    formats: ['image/webp', 'image/avif'],\n  },\n};\n</code></pre>"},{"location":"deployment/#backup-recovery","title":"\ud83d\udd04 Backup &amp; Recovery","text":""},{"location":"deployment/#database-backup","title":"Database Backup","text":"<pre><code># Automated backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\npg_dump $DATABASE_URL &gt; backup_$DATE.sql\n\n# Upload to cloud storage\naws s3 cp backup_$DATE.sql s3://your-backup-bucket/\n</code></pre>"},{"location":"deployment/#disaster-recovery","title":"Disaster Recovery","text":"<ol> <li> <p>Database Recovery <pre><code># Restore from backup\npsql $DATABASE_URL &lt; backup_file.sql\n</code></pre></p> </li> <li> <p>Application Rollback <pre><code># Rollback deployment\nvercel rollback\n</code></pre></p> </li> </ol>"},{"location":"deployment/#deployment-checklist","title":"\ud83d\udccb Deployment Checklist","text":""},{"location":"deployment/#pre-deployment","title":"Pre-Deployment","text":"<ul> <li>[ ] All tests pass</li> <li>[ ] Code linting passes</li> <li>[ ] Type checking passes</li> <li>[ ] Build succeeds locally</li> <li>[ ] Environment variables configured</li> <li>[ ] Database schema up to date</li> <li>[ ] Dependencies updated</li> </ul>"},{"location":"deployment/#deployment","title":"Deployment","text":"<ul> <li>[ ] Deploy to staging first</li> <li>[ ] Run smoke tests</li> <li>[ ] Monitor error rates</li> <li>[ ] Check performance metrics</li> <li>[ ] Verify critical user flows</li> </ul>"},{"location":"deployment/#post-deployment","title":"Post-Deployment","text":"<ul> <li>[ ] Update documentation</li> <li>[ ] Notify team</li> <li>[ ] Monitor for 24 hours</li> <li>[ ] Create release notes</li> <li>[ ] Plan next deployment</li> </ul>"},{"location":"deployment/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"deployment/#common-issues","title":"Common Issues","text":""},{"location":"deployment/#build-failures","title":"Build Failures","text":"<pre><code># Clear Next.js cache\nrm -rf .next\n\n# Clear node_modules\nrm -rf node_modules\npnpm install\n</code></pre>"},{"location":"deployment/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code>// Check database connectivity\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\nawait prisma.$connect();\nconsole.log('Database connected successfully');\n</code></pre>"},{"location":"deployment/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Check environment variables\nprintenv | grep NEXT_PUBLIC\n\n# Validate Supabase connection\ncurl https://your-project.supabase.co/rest/v1/\n</code></pre> <p>For additional support, check the Contributing Guide or create an issue on GitHub.</p>"},{"location":"getting-started/","title":"Getting Started with Ecosyz","text":"<p>Welcome to Ecosyz! This guide will help you get up and running with the Open Idea platform in minutes.</p>"},{"location":"getting-started/#prerequisites","title":"\ud83d\ude80 Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js 18+ (Download)</li> <li>pnpm package manager (Install)</li> <li>Git (Download)</li> <li>Supabase Account (Sign up)</li> </ul>"},{"location":"getting-started/#quick-setup","title":"\ud83d\udce6 Quick Setup","text":""},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/Sony17/Ecosyz.git\ncd Ecosyz\n</code></pre>"},{"location":"getting-started/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>pnpm install\n</code></pre>"},{"location":"getting-started/#3-environment-setup","title":"3. Environment Setup","text":"<pre><code># Copy environment template\ncp .env.example .env.local\n\n# Edit with your values\nnano .env.local\n</code></pre> <p>Required Environment Variables: <pre><code># Supabase Configuration\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n\n# Database\nDATABASE_URL=your_database_url\nDIRECT_URL=your_direct_database_url\n\n# Optional: External APIs\nOPENAI_API_KEY=your_openai_key\nGOOGLE_SEARCH_API_KEY=your_google_api_key\n</code></pre></p>"},{"location":"getting-started/#4-database-setup","title":"4. Database Setup","text":"<pre><code># Generate Prisma client\nnpx prisma generate\n\n# Push database schema\nnpx prisma db push\n\n# Optional: Open Prisma Studio\nnpx prisma studio\n</code></pre>"},{"location":"getting-started/#5-start-development-server","title":"5. Start Development Server","text":"<pre><code>pnpm dev\n</code></pre> <p>Visit http://localhost:3000 to see your app!</p>"},{"location":"getting-started/#development-workflow","title":"\ud83d\udd27 Development Workflow","text":""},{"location":"getting-started/#code-quality","title":"Code Quality","text":"<pre><code># Run linting\npnpm lint\n\n# Run type checking\npnpx tsc --noEmit\n\n# Run tests (when available)\npnpm test\n</code></pre>"},{"location":"getting-started/#database-management","title":"Database Management","text":"<pre><code># View database in browser\nnpx prisma studio\n\n# Reset database (development only)\nnpx prisma migrate reset\n\n# Create new migration\nnpx prisma migrate dev --name your_migration_name\n</code></pre>"},{"location":"getting-started/#api-testing","title":"API Testing","text":"<pre><code># Test authentication\ncurl -X POST http://localhost:3000/api/auth/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\":\"test@example.com\",\"password\":\"test123\",\"name\":\"Test User\"}'\n\n# Test profile API\ncurl http://localhost:3000/api/profile\n</code></pre>"},{"location":"getting-started/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<pre><code>Ecosyz/\n\u251c\u2500\u2500 app/                    # Next.js App Router\n\u2502   \u251c\u2500\u2500 api/               # API routes\n\u2502   \u251c\u2500\u2500 auth/              # Authentication pages\n\u2502   \u251c\u2500\u2500 components/        # React components\n\u2502   \u2514\u2500\u2500 globals.css        # Global styles\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 prisma/                # Database schema\n\u251c\u2500\u2500 src/                   # Source code\n\u2502   \u251c\u2500\u2500 lib/              # Utilities and configurations\n\u2502   \u2514\u2500\u2500 types/            # TypeScript types\n\u251c\u2500\u2500 public/                # Static assets\n\u2514\u2500\u2500 tests/                 # Test files\n</code></pre>"},{"location":"getting-started/#authentication-setup","title":"\ud83d\udd10 Authentication Setup","text":""},{"location":"getting-started/#supabase-configuration","title":"Supabase Configuration","text":"<ol> <li>Create Project: Go to Supabase Dashboard</li> <li>Get Keys: Copy URL and anon key from project settings</li> <li>Enable Auth: Configure authentication providers</li> <li>Database: Set up database and run migrations</li> </ol>"},{"location":"getting-started/#oauth-providers-optional","title":"OAuth Providers (Optional)","text":"<p>Configure in Supabase Dashboard: - GitHub: Add GitHub OAuth app - Google: Add Google OAuth credentials</p>"},{"location":"getting-started/#deployment","title":"\ud83d\ude80 Deployment","text":""},{"location":"getting-started/#vercel-recommended","title":"Vercel (Recommended)","text":"<pre><code># Install Vercel CLI\nnpm i -g vercel\n\n# Deploy\nvercel\n\n# Add environment variables in Vercel dashboard\n</code></pre>"},{"location":"getting-started/#manual-deployment","title":"Manual Deployment","text":"<pre><code># Build for production\npnpm build\n\n# Start production server\npnpm start\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>\"Invalid login credentials\" - Check Supabase URL and keys - Ensure user exists in Supabase Auth - Verify email confirmation settings</p> <p>\"Database connection failed\" - Check DATABASE_URL in .env.local - Run <code>npx prisma generate</code> - Ensure Supabase database is accessible</p> <p>\"Build failed\" - Run <code>pnpm lint</code> and fix errors - Check TypeScript errors with <code>pnpx tsc --noEmit</code> - Clear Next.js cache: <code>rm -rf .next</code></p>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"getting-started/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Explore the codebase - Start with <code>app/page.tsx</code></li> <li>Test authentication - Try signup/signin flow</li> <li>Customize UI - Modify components in <code>app/components/</code></li> <li>Add features - Check the backlog</li> </ol> <p>Happy coding! \ud83d\ude80</p>"},{"location":"lru-cache/","title":"In-Memory LRU Cache for Federated Search API","text":"<p>This project uses an in-memory LRU (Least Recently Used) cache in <code>app/api/search/route.ts</code> to optimize federated search queries.</p>"},{"location":"lru-cache/#what-it-does","title":"What It Does","text":"<ul> <li>Reduces API Rate Limits: By caching recent search results, repeated queries are served from memory instead of hitting external APIs, reducing the risk of rate limiting.</li> <li>Speeds Up Repeated Searches: Cached results are returned instantly for repeated queries, improving user experience.</li> <li>Automatic Expiry: Each cache entry has a time-to-live (TTL) (default: 5 minutes). Old entries are automatically removed.</li> <li>LRU Eviction: When the cache exceeds its maximum size (default: 100 queries), the least recently used entry is evicted.</li> </ul>"},{"location":"lru-cache/#how-it-works","title":"How It Works","text":"<ul> <li>The cache is a JavaScript <code>Map</code> where keys are query+type and values are <code>{ ts, data }</code> objects.</li> <li>On every search, the cache is checked first. If a valid entry exists, it is returned and marked as most recently used.</li> <li>When a new result is cached, it is added as most recently used. If the cache is full, the oldest entry is removed.</li> <li>TTL and max size can be tuned in the code.</li> </ul>"},{"location":"lru-cache/#code-reference","title":"Code Reference","text":"<p>See the <code>getCache</code> and <code>setCache</code> functions in <code>app/api/search/route.ts</code> for implementation details.</p> <p>For distributed or persistent caching, consider using Redis or a similar external cache.</p>"},{"location":"summarization/","title":"Summarization: Design, API, and Future Scope","text":"<p>This document explains how summarization works in Ecosyz today, how to configure it, the API contracts (JSON + SSE streaming), and ideas for future enhancements.</p>"},{"location":"summarization/#goals","title":"Goals","text":"<ul> <li>Provide fast, zero-LLM extractive summaries for papers and metadata.</li> <li>Use PDFs when possible (\"deep\") and fall back to abstract/title (\"quick\").</li> <li>Stream partial results to the UI for responsiveness.</li> <li>Cache results in-memory and optionally in a shared KV store.</li> </ul>"},{"location":"summarization/#architecture-overview","title":"Architecture Overview","text":"<ul> <li>UI: <code>app/openresources/page.tsx</code></li> <li>Presents a search list. Each paper has a <code>Summarize</code> button.</li> <li>Summary is shown inline and in a glassy modal.</li> <li>Uses Server-Sent Events (SSE) to stream TL;DR, bullets, and tags.</li> <li>API: <code>app/api/summarize/route.ts</code> (Node runtime)</li> <li><code>POST /api/summarize</code> returns a full JSON summary.</li> <li><code>GET /api/summarize?...</code> streams partial results via SSE.</li> <li>Deep: attempts to fetch a PDF and summarize extracted text.</li> <li>Quick: summarizes <code>title + abstract</code>.</li> </ul>"},{"location":"summarization/#flow-diagram-mermaid","title":"Flow Diagram (Mermaid)","text":"<pre><code>flowchart TD\n  U[User clicks Summarize] --&gt; UI[UI opens glassy modal]\\n(EventSource /api/summarize)\n  UI --&gt;|SSE| API[API GET /api/summarize]\n  API --&gt; KV{KV configured?}\n  KV -- yes --&gt; KVGET[KV get(key)]\n  KVGET --&gt;|hit| META1[send meta (fromCache=kv)] --&gt; UI\n  KVGET --&gt;|hit| TLDR1[send tldr] --&gt; UI\n  KVGET --&gt;|hit| BUL1[send bullets] --&gt; UI\n  KVGET --&gt;|hit| TAG1[send tags] --&gt; UI\n  KVGET --&gt;|hit| DONE1[send done] --&gt; UI\n  KV -- no or miss --&gt; MEM{Memory cache hit?}\n  MEM -- yes --&gt; META2[send meta (fromCache=memory)] --&gt; UI\n  MEM --&gt; TLDR2[send tldr] --&gt; UI\n  MEM --&gt; BUL2[send bullets] --&gt; UI\n  MEM --&gt; TAG2[send tags] --&gt; UI\n  MEM --&gt; DONE2[send done] --&gt; UI\n  MEM -- no --&gt; MODE{mode === deep?}\n  MODE -- deep --&gt; PDF[Derive PDF URL (provider-specific)]\n  PDF --&gt;|arXiv/OpenAlex/Zenodo/Generic| FETCH[Fetch PDF &amp; pdf-parse]\n  FETCH --&gt;|ok| SUM[Summarize text (extractive)]\n  SUM --&gt; SETMEM[Set memory cache]\n  SUM --&gt; SETKV[Set KV (if configured)]\n  SUM --&gt; META3[send meta (fromCache=false)] --&gt; UI\n  SUM --&gt; TLDR3[send tldr] --&gt; UI\n  SUM --&gt; BUL3[send bullets] --&gt; UI\n  SUM --&gt; TAG3[send tags] --&gt; UI\n  SUM --&gt; DONE3[send done] --&gt; UI\n  FETCH -- fail --&gt; ERR1[send error] --&gt; UI\n  MODE -- quick --&gt; QSUM[Summarize title+abstract]\n  QSUM --&gt; SETMEM\n  QSUM --&gt; SETKV\n  QSUM --&gt; META4[send meta (fromCache=false)] --&gt; UI\n  QSUM --&gt; TLDR4[send tldr] --&gt; UI\n  QSUM --&gt; BUL4[send bullets] --&gt; UI\n  QSUM --&gt; TAG4[send tags] --&gt; UI\n  QSUM --&gt; DONE4[send done] --&gt; UI\n</code></pre>"},{"location":"summarization/#modes-quick-vs-deep","title":"Modes: Quick vs Deep","text":"<ul> <li>Quick mode: summarize <code>title + abstract</code>. Always available.</li> <li>Deep mode: summarize extracted text from a PDF.</li> <li>PDF Derivation:<ul> <li>arXiv: build <code>https://arxiv.org/pdf/&lt;id&gt;.pdf</code> from <code>abs/id</code> or <code>arxiv:</code>.</li> <li>OpenAlex: query Works API for OA PDF URLs; confirm via <code>HEAD</code> if needed.</li> <li>Zenodo: fetch record files; pick a PDF by mimetype or filename.</li> <li>Generic: accept direct <code>.pdf</code> URLs or <code>HEAD</code> with <code>content-type: application/pdf</code>.</li> </ul> </li> <li>Extract text using <code>pdf-parse</code> (dynamically imported) and summarize it.</li> </ul>"},{"location":"summarization/#summarization-algorithm-extractive","title":"Summarization Algorithm (Extractive)","text":"<ul> <li>Tokenization, stopwords filtering, and sentence splitting.</li> <li>Sentence frequencies score sentences; pick top N (e.g., 5\u20136), keep original order.</li> <li>Outputs:</li> <li><code>tldr</code> (1\u20132 sentences), <code>bullets</code> (top sentences), <code>tags</code> (top non-stopword tokens), and <code>readingTimeMinutes</code>.</li> <li><code>confidence</code> is a fixed \"medium\" for now.</li> </ul>"},{"location":"summarization/#api-contracts","title":"API Contracts","text":""},{"location":"summarization/#post-apisummarize","title":"POST /api/summarize","text":"<ul> <li>Request body: <pre><code>{\n  \"id\": \"string\",             // optional but recommended\n  \"source\": \"string\",         // e.g., \"arxiv\", \"openalex\", \"zenodo\"\n  \"title\": \"string\",          // title text\n  \"abstract\": \"string\",       // abstract or description\n  \"url\": \"string\",            // original resource URL\n  \"mode\": \"quick\" | \"deep\"    // requested mode\n}\n</code></pre></li> <li>Response (200): <pre><code>{\n  \"tldr\": \"string\",\n  \"bullets\": [\"...\"],\n  \"tags\": [\"...\"],\n  \"readingTimeMinutes\": 3,\n  \"confidence\": \"medium\",\n  \"modeUsed\": \"quick\" | \"deep\",\n  \"fromCache\": true | false,\n  \"cache\": \"kv\" | \"memory\" | \"none\"\n}\n</code></pre></li> <li>Error (4xx/5xx): <code>{ \"error\": \"message\" }</code>.</li> </ul>"},{"location":"summarization/#get-apisummarize-sse","title":"GET /api/summarize (SSE)","text":"<ul> <li>Query params: same fields as POST but via <code>?id=...&amp;source=...&amp;title=...&amp;abstract=...&amp;url=...&amp;mode=...</code>.</li> <li>Events:</li> <li><code>meta</code>: <code>{ fromCache, cache, modeUsed | modeRequested }</code></li> <li><code>tldr</code>: <code>string</code></li> <li><code>bullets</code>: <code>string[]</code></li> <li><code>tags</code>: <code>string[]</code></li> <li><code>done</code>: <code>{ ok: true }</code></li> <li><code>error</code>: <code>{ message }</code></li> </ul>"},{"location":"summarization/#caching","title":"Caching","text":"<ul> <li>In-memory (Map with a 7-day TTL) for fast local reuse.</li> <li>Optional shared cache via Vercel KV / Upstash (7-day TTL).</li> <li>Set env vars to enable:<ul> <li><code>KV_REST_API_URL</code></li> <li><code>KV_REST_API_TOKEN</code></li> </ul> </li> <li>If not configured, KV is ignored (no-op) and only in-memory cache is used.</li> </ul>"},{"location":"summarization/#configuration","title":"Configuration","text":"<ul> <li>Node runtime routes are required (uses <code>Buffer</code>, dynamic import):</li> <li><code>app/api/summarize/route.ts</code> exports <code>export const runtime = 'nodejs'</code>.</li> <li>Dependencies:</li> <li><code>pdf-parse</code> (dynamic import)</li> <li>Optional: <code>@vercel/kv</code> (only if KV env vars are set)</li> </ul>"},{"location":"summarization/#ui-behavior","title":"UI Behavior","text":"<ul> <li>Clicking Summarize opens a glassy modal.</li> <li>Results stream in (TL;DR then bullets and tags).</li> <li>Badges display mode (Deep vs Quick) and cache source (KV/Memory/Fresh).</li> <li>Errors are shown via toasts; modal closes on streaming error.</li> <li>Descriptions and summary text are sanitized of HTML tags/entities before rendering.</li> </ul>"},{"location":"summarization/#limitations","title":"Limitations","text":"<ul> <li>Some PDFs are not accessible (paywalled, blocked <code>HEAD</code>, or CORS); deep may fail.</li> <li>Scanned/image-only PDFs won\u2019t extract text (no OCR).</li> <li>Very long PDFs are truncated for responsiveness.</li> </ul>"},{"location":"summarization/#future-scope","title":"Future Scope","text":"<ul> <li>LLM Summarization (Optional tier)</li> <li>Use an LLM for abstractive summaries with citations.</li> <li>Stream tokens over SSE (the plumbing already exists).</li> <li>Add safety and cost controls with per-user limits and provider selection.</li> <li>OCR for Scanned PDFs</li> <li>Integrate Tesseract or a service to OCR image-based PDFs.</li> <li>KV / Durable Cache</li> <li>Add eviction policies, versions, and per-source sanctity checks.</li> <li>Optional background prewarming for popular items.</li> <li>User Controls</li> <li>Toggle: Deep only vs Auto (deep \u2192 quick fallback).</li> <li>Controls for max sentences, tone (technical/lay), and language.</li> <li>Diagnostics &amp; Observability</li> <li>Debug panel showing which PDF URL was chosen, time to fetch/parse, and cache hits.</li> <li>Metrics and tracing for failures and latencies.</li> <li>Accessibility &amp; UX</li> <li>Keyboard shortcuts (open modal, navigate bullets, close on Esc).</li> <li>Improved animations and responsive behavior.</li> <li>Security &amp; Sanitization</li> <li>Move sanitization server-side for consistent behavior.</li> <li>Add allowlists for domains when following redirects to PDFs.</li> </ul>"},{"location":"summarization/#local-development","title":"Local Development","text":"<pre><code>npm install\nnpm run dev\n# open http://localhost:3000/openresources\n</code></pre>"},{"location":"summarization/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>\"Module not found: pdf-parse\": ensure <code>pdf-parse</code> is in <code>dependencies</code> and the route runs on Node runtime.</li> <li>\"Module not found: @vercel/kv\": install <code>@vercel/kv</code> or remove KV env vars if not using KV.</li> <li>Deep summaries failing: check network access to the PDF URL; if blocked, try quick mode or set up a proxy.</li> </ul>"},{"location":"summarization/#how-to-add-a-new-provider-to-deep-mode","title":"How to Add a New Provider to Deep Mode","text":"<p>This guide shows the minimal steps to enable PDF-based deep summaries for an additional provider.</p> <p>1) Implement PDF URL Derivation - Add a helper in <code>app/api/summarize/route.ts</code> similar to <code>deriveOpenAlexPdf</code> or <code>deriveZenodoPdf</code>. For example:   - Call the provider\u2019s record/works API.   - Find a file link with a PDF mimetype or <code>.pdf</code> filename.   - If the URL doesn\u2019t end with <code>.pdf</code>, make a <code>HEAD</code> request and confirm <code>content-type: application/pdf</code>.</p> <p>2) Wire the Helper into Deep Mode - In <code>POST</code> and <code>GET</code> handlers, extend the <code>if (mode === 'deep')</code> section:   <pre><code>else if (source === 'myprovider') pdfUrl = await deriveMyProviderPdf(url || id || '', controller.signal);\n</code></pre>   - Keep the same fallback flow as existing providers: if no valid PDF URL is found, return an error (deep-only) or fall back to quick (if you opt for auto mode).</p> <p>3) Sanity &amp; Limits - Try-catch all network calls and treat non-2xx as no PDF available. - Enforce a reasonable timeout (e.g., 25s via <code>AbortController</code>). - Cap extracted text size (e.g., 200k chars) before summarization.</p> <p>4) Caching - The route already caches by key <code>${id || title}:${mode}</code>. - No extra work is needed to benefit from memory/KV caches.</p> <p>5) Testing Checklist - Resource with an accessible PDF \u2192 should stream a Deep summary with the badge. - Resource without a PDF \u2192 should error in deep-only mode, or fall back if allowed. - Very large PDF \u2192 processed and truncated; summary still produced. - Ensure the glassy modal opens, updates progressively, and closes on error.</p> <p>Tips - If the provider uses redirects or signed URLs, prefer <code>redirect: 'follow'</code> and confirm with <code>HEAD</code>. - If the provider requires auth, do not hardcode secrets. Add a secure fetch layer and read tokens from environment variables.</p>"},{"location":"workspace-architecture/","title":"Workspace Component Architecture","text":""},{"location":"workspace-architecture/#overview","title":"Overview","text":"<p>The workspace feature in Ecosyz is built using a modular component architecture that allows for different usage patterns and integration scenarios. The core components are designed to be flexible and reusable, with consistent prop interfaces that make them adaptable to various contexts.</p>"},{"location":"workspace-architecture/#core-components","title":"Core Components","text":""},{"location":"workspace-architecture/#1-workspacesidebar","title":"1. WorkspaceSidebar","text":"<p>The <code>WorkspaceSidebar</code> component is the primary navigation interface for the workspace feature. It displays:</p> <ul> <li>User profile information</li> <li>Workspace listing (pinned and recent)</li> <li>Projects within the selected workspace</li> <li>Navigation links to other parts of the application</li> <li>Actions like creating workspaces and managing projects</li> </ul>"},{"location":"workspace-architecture/#interface","title":"Interface","text":"<p>The component accepts a unified interface that supports both the newer naming convention and backward compatibility:</p> <pre><code>interface WorkspaceSidebarProps {\n  // Core props\n  userId?: string;\n\n  // Workspace selection props\n  selectedWorkspaceId?: string | null;\n  setSelectedWorkspaceId?: (workspaceId: string | null) =&gt; void;\n\n  // Project selection props\n  selectedProjectId?: string | null;\n  setSelectedProjectId?: (projectId: string | null) =&gt; void;\n\n  // Sidebar control\n  sidebarOpen?: boolean;\n  setSidebarOpen?: (open: boolean) =&gt; void;\n\n  // Action handlers\n  onAddResource?: () =&gt; void;\n  onCreateWorkspace?: () =&gt; void;\n  onShareWorkspace?: () =&gt; void;\n}\n</code></pre>"},{"location":"workspace-architecture/#2-chatgptworkspace","title":"2. ChatGPTWorkspace","text":"<p>This component implements a ChatGPT-like workspace interface using the sidebar. It manages:</p> <ul> <li>The sidebar visibility state</li> <li>Active workspace selection</li> <li>Modal displays for adding resources and creating workspaces</li> <li>The main content area with chat-like interaction</li> </ul>"},{"location":"workspace-architecture/#3-workspacecontainer","title":"3. WorkspaceContainer","text":"<p>A more general-purpose container that integrates the sidebar with a workbench. It's designed for:</p> <ul> <li>Holding the workspace UI structure</li> <li>Managing workspace and project selection</li> <li>Controlling sidebar visibility</li> </ul>"},{"location":"workspace-architecture/#data-flow","title":"Data Flow","text":"<p>The data flow between these components follows these patterns:</p> <ol> <li>Workspace Selection:</li> <li>User selects a workspace in the sidebar</li> <li>The selection is propagated up to the parent (ChatGPTWorkspace or WorkspaceContainer)</li> <li>The parent component updates its state and potentially fetches new data</li> <li> <p>Changes may trigger navigation using Next.js router</p> </li> <li> <p>Project Selection:</p> </li> <li>Similar to workspace selection, but scoped to the current workspace</li> <li> <p>Projects are fetched based on the selected workspace</p> </li> <li> <p>Sidebar Visibility:</p> </li> <li>Controlled by the parent component</li> <li>Toggle controls are embedded in the sidebar itself</li> <li>State is lifted up to ensure consistency across the application</li> </ol>"},{"location":"workspace-architecture/#state-management","title":"State Management","text":"<p>State is managed at multiple levels:</p> <ol> <li>Local Component State:</li> <li>UI state like modals, context menus, etc.</li> <li> <p>Temporary form data</p> </li> <li> <p>Lifted State:</p> </li> <li>Important selections (workspace, project)</li> <li> <p>Sidebar visibility</p> </li> <li> <p>Future Enhancements:</p> </li> <li>Consider moving to a more centralized state management with React Context or a state management library for more complex scenarios</li> <li>Implement proper data fetching patterns with SWR or React Query to handle caching and synchronization</li> </ol>"},{"location":"workspace-architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Unified Interface:</li> <li>Consistent prop naming across components</li> <li> <p>Backward compatibility to prevent breaking changes</p> </li> <li> <p>Defensive Programming:</p> </li> <li>Optional chaining for all callback props</li> <li>Default values for important props</li> <li> <p>Type safety with TypeScript</p> </li> <li> <p>Performance:</p> </li> <li>Lazy loading of modals with AnimatePresence</li> <li>Debounced searches</li> <li>Optimistic UI updates</li> </ol>"},{"location":"workspace-architecture/#integration-guide","title":"Integration Guide","text":"<p>When integrating these components into other parts of the application:</p> <ol> <li>For minimal usage, just mount <code>WorkspaceSidebar</code> with required props</li> <li>For a complete workspace UI, use <code>ChatGPTWorkspace</code> or <code>WorkspaceContainer</code></li> <li>Always provide the core selection props (workspaceId, projectId)</li> <li>Implement the necessary callbacks to handle selections</li> </ol>"},{"location":"workspace-architecture/#design-decisions","title":"Design Decisions","text":"<ol> <li>Split Component Architecture: </li> <li>Allows for more flexible integration</li> <li>Makes testing and maintenance easier</li> <li> <p>Enables different UI configurations</p> </li> <li> <p>Consistent Prop Interface:</p> </li> <li>Reduces cognitive load for developers</li> <li> <p>Makes components more predictable</p> </li> <li> <p>Backward Compatibility:</p> </li> <li>Ensures existing integrations continue to work</li> <li> <p>Allows for gradual migration to the new interface</p> </li> <li> <p>Centralized State Management:</p> </li> <li>Currently using prop drilling and lifted state</li> <li>Future versions could implement React Context or Redux for more complex state requirements</li> </ol>"},{"location":"workspace-implementation-guide/","title":"ChatGPT-Like Workspace Implementation Guide","text":"<p>This guide provides step-by-step instructions for implementing the remaining components of the ChatGPT-like workspace interface.</p>"},{"location":"workspace-implementation-guide/#1-left-sidebar-navigation","title":"1. Left Sidebar Navigation","text":""},{"location":"workspace-implementation-guide/#implementation-steps","title":"Implementation Steps:","text":"<ol> <li>Update ChatGPTWorkspace.tsx:</li> <li>Enhance the existing sidebar with proper collapsing animation</li> <li>Add workspace categories (Recent, Pinned, Archived)</li> <li>Include project filtering functionality</li> </ol> <pre><code>// Example sidebar enhancement\n&lt;motion.div\n  initial={false}\n  animate={{ width: sidebarOpen ? '280px' : '0px' }}\n  className={`relative flex-shrink-0 border-r border-white/10 overflow-hidden ${\n    sidebarOpen ? 'flex flex-col' : 'hidden'\n  }`}\n&gt;\n  {/* Sidebar Header with Logo */}\n  &lt;div className=\"p-4 border-b border-white/10 flex items-center\"&gt;\n    &lt;div className=\"flex-1\"&gt;\n      &lt;h2 className=\"text-xl font-semibold\"&gt;OpenIdea&lt;/h2&gt;\n    &lt;/div&gt;\n    &lt;button\n      onClick={() =&gt; setSidebarOpen(false)}\n      className=\"p-2 text-gray-400 hover:text-white hover:bg-white/5 rounded-lg\"\n    &gt;\n      &lt;ChevronLeft className=\"w-5 h-5\" /&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n\n  {/* New Project Button */}\n  &lt;div className=\"p-2\"&gt;\n    &lt;button\n      onClick={() =&gt; setShowAddResourceModal(true)}\n      className=\"w-full flex items-center justify-center gap-2 px-3 py-2 bg-emerald-600 hover:bg-emerald-700 rounded-lg transition-colors\"\n    &gt;\n      &lt;Plus className=\"w-5 h-5\" /&gt;\n      &lt;span&gt;New Project&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n\n  {/* Workspace Navigation */}\n  &lt;div className=\"px-2 py-4 border-b border-white/10\"&gt;\n    &lt;button className=\"w-full flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg\"&gt;\n      &lt;Home className=\"w-5 h-5\" /&gt;\n      &lt;span className=\"text-sm\"&gt;Home&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;button className=\"w-full flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg\"&gt;\n      &lt;Star className=\"w-5 h-5\" /&gt;\n      &lt;span className=\"text-sm\"&gt;Starred&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;button className=\"w-full flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg\"&gt;\n      &lt;Clock className=\"w-5 h-5\" /&gt;\n      &lt;span className=\"text-sm\"&gt;Recent&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;button className=\"w-full flex items-center gap-3 px-3 py-2 hover:bg-white/5 rounded-lg\"&gt;\n      &lt;Lightbulb className=\"w-5 h-5\" /&gt;\n      &lt;span className=\"text-sm\"&gt;Community&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n\n  {/* Rest of sidebar content... */}\n&lt;/motion.div&gt;\n</code></pre> <ol> <li>Create Collapsible Button:</li> <li>Add a button to expand the sidebar when it's collapsed</li> <li>Ensure smooth transitions between states</li> </ol> <pre><code>// Collapsed sidebar button\n{!sidebarOpen &amp;&amp; (\n  &lt;button\n    onClick={() =&gt; setSidebarOpen(true)}\n    className=\"fixed left-4 top-4 p-2 bg-gray-800 text-white rounded-lg shadow-lg hover:bg-gray-700 transition-colors\"\n  &gt;\n    &lt;ChevronRight className=\"w-5 h-5\" /&gt;\n  &lt;/button&gt;\n)}\n</code></pre>"},{"location":"workspace-implementation-guide/#2-user-profile-system","title":"2. User Profile System","text":""},{"location":"workspace-implementation-guide/#implementation-steps_1","title":"Implementation Steps:","text":"<ol> <li>Enhance ProfileForm.tsx:</li> <li>Add subscription management section</li> <li>Include user preferences (theme, notifications)</li> <li> <p>Add avatar upload functionality</p> </li> <li> <p>Create User Settings Component:</p> </li> </ol> <pre><code>// UserSettings.tsx\nimport { useState, useEffect } from 'react';\nimport { User, Settings, Bell, CreditCard, Shield } from 'lucide-react';\nimport AvatarUploader from './AvatarUploader';\n\nexport default function UserSettings({ user }) {\n  const [activeTab, setActiveTab] = useState('profile');\n  const [theme, setTheme] = useState('dark');\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n\n  return (\n    &lt;div className=\"w-full max-w-4xl mx-auto bg-gray-900 rounded-lg overflow-hidden\"&gt;\n      &lt;div className=\"flex border-b border-white/10\"&gt;\n        &lt;button\n          onClick={() =&gt; setActiveTab('profile')}\n          className={`px-4 py-3 flex items-center gap-2 ${\n            activeTab === 'profile' ? 'border-b-2 border-emerald-500' : ''\n          }`}\n        &gt;\n          &lt;User className=\"w-5 h-5\" /&gt;\n          &lt;span&gt;Profile&lt;/span&gt;\n        &lt;/button&gt;\n\n        &lt;button\n          onClick={() =&gt; setActiveTab('subscription')}\n          className={`px-4 py-3 flex items-center gap-2 ${\n            activeTab === 'subscription' ? 'border-b-2 border-emerald-500' : ''\n          }`}\n        &gt;\n          &lt;CreditCard className=\"w-5 h-5\" /&gt;\n          &lt;span&gt;Subscription&lt;/span&gt;\n        &lt;/button&gt;\n\n        &lt;button\n          onClick={() =&gt; setActiveTab('appearance')}\n          className={`px-4 py-3 flex items-center gap-2 ${\n            activeTab === 'appearance' ? 'border-b-2 border-emerald-500' : ''\n          }`}\n        &gt;\n          &lt;Settings className=\"w-5 h-5\" /&gt;\n          &lt;span&gt;Appearance&lt;/span&gt;\n        &lt;/button&gt;\n\n        &lt;button\n          onClick={() =&gt; setActiveTab('notifications')}\n          className={`px-4 py-3 flex items-center gap-2 ${\n            activeTab === 'notifications' ? 'border-b-2 border-emerald-500' : ''\n          }`}\n        &gt;\n          &lt;Bell className=\"w-5 h-5\" /&gt;\n          &lt;span&gt;Notifications&lt;/span&gt;\n        &lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"p-6\"&gt;\n        {activeTab === 'profile' &amp;&amp; (\n          &lt;div className=\"space-y-6\"&gt;\n            &lt;div className=\"flex items-center gap-6\"&gt;\n              &lt;AvatarUploader currentUser={user} /&gt;\n              &lt;div&gt;\n                &lt;h3 className=\"text-xl font-medium\"&gt;{user?.name || 'User'}&lt;/h3&gt;\n                &lt;p className=\"text-gray-400\"&gt;{user?.email}&lt;/p&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n\n            {/* Profile form fields */}\n            {/* ... */}\n          &lt;/div&gt;\n        )}\n\n        {activeTab === 'subscription' &amp;&amp; (\n          &lt;div className=\"space-y-6\"&gt;\n            &lt;h3 className=\"text-xl font-medium\"&gt;Subscription&lt;/h3&gt;\n            &lt;div className=\"grid grid-cols-3 gap-4\"&gt;\n              {/* Subscription plan cards */}\n              {/* ... */}\n            &lt;/div&gt;\n          &lt;/div&gt;\n        )}\n\n        {/* Other tabs */}\n        {/* ... */}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"workspace-implementation-guide/#3-project-creation-management","title":"3. Project Creation &amp; Management","text":""},{"location":"workspace-implementation-guide/#implementation-steps_2","title":"Implementation Steps:","text":"<ol> <li>Enhance AddResourceForm.tsx:</li> <li>Rename to ProjectCreationModal.tsx</li> <li>Add project templates</li> <li> <p>Include privacy settings</p> </li> <li> <p>Create Project Card Component:</p> </li> </ol> <pre><code>// ProjectCard.tsx\nimport { useState } from 'react';\nimport { MoreHorizontal, Star, Clock } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\nexport default function ProjectCard({ project, onSelect }) {\n  const [showActions, setShowActions] = useState(false);\n\n  return (\n    &lt;div\n      className=\"bg-gray-800 rounded-lg overflow-hidden hover:ring-1 hover:ring-emerald-500 transition-all\"\n      onMouseEnter={() =&gt; setShowActions(true)}\n      onMouseLeave={() =&gt; setShowActions(false)}\n    &gt;\n      &lt;div className=\"p-4\"&gt;\n        &lt;div className=\"flex items-center justify-between mb-2\"&gt;\n          &lt;h3 className=\"font-medium truncate\"&gt;{project.title}&lt;/h3&gt;\n\n          {showActions &amp;&amp; (\n            &lt;div className=\"flex items-center gap-2\"&gt;\n              &lt;button className=\"p-1 text-gray-400 hover:text-emerald-500 transition-colors\"&gt;\n                &lt;Star className=\"w-4 h-4\" /&gt;\n              &lt;/button&gt;\n              &lt;button className=\"p-1 text-gray-400 hover:text-gray-300 transition-colors\"&gt;\n                &lt;MoreHorizontal className=\"w-4 h-4\" /&gt;\n              &lt;/button&gt;\n            &lt;/div&gt;\n          )}\n        &lt;/div&gt;\n\n        &lt;p className=\"text-sm text-gray-400 truncate mb-4\"&gt;\n          {project.description || 'No description'}\n        &lt;/p&gt;\n\n        &lt;div className=\"flex items-center justify-between text-xs text-gray-500\"&gt;\n          &lt;div className=\"flex items-center gap-1\"&gt;\n            &lt;Clock className=\"w-3 h-3\" /&gt;\n            &lt;span&gt;{formatDistanceToNow(new Date(project.createdAt))} ago&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;span&gt;{project.resources?.length || 0} resources&lt;/span&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button\n        onClick={() =&gt; onSelect(project)}\n        className=\"w-full p-2 text-center text-sm bg-gray-700 hover:bg-emerald-600 transition-colors\"\n      &gt;\n        Open Project\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ol> <li>Create Project Grid Component:</li> </ol> <pre><code>// ProjectGrid.tsx\nimport ProjectCard from './ProjectCard';\n\nexport default function ProjectGrid({ projects, onSelectProject }) {\n  return (\n    &lt;div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n      {projects.map(project =&gt; (\n        &lt;ProjectCard\n          key={project.id}\n          project={project}\n          onSelect={onSelectProject}\n        /&gt;\n      ))}\n\n      {projects.length === 0 &amp;&amp; (\n        &lt;div className=\"col-span-full flex flex-col items-center justify-center py-12 text-gray-400\"&gt;\n          &lt;p className=\"text-center\"&gt;No projects yet&lt;/p&gt;\n          &lt;button className=\"mt-4 px-4 py-2 bg-emerald-600 hover:bg-emerald-700 rounded-lg transition-colors\"&gt;\n            Create your first project\n          &lt;/button&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"workspace-implementation-guide/#4-chat-style-interaction","title":"4. Chat-Style Interaction","text":""},{"location":"workspace-implementation-guide/#implementation-steps_3","title":"Implementation Steps:","text":"<ol> <li>Create ChatInterface Component:</li> </ol> <pre><code>// ChatInterface.tsx\nimport { useState, useRef, useEffect } from 'react';\nimport { Send, PaperclipIcon } from 'lucide-react';\n\ninterface Message {\n  id: string;\n  role: 'user' | 'system' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function ChatInterface() {\n  const [messages, setMessages] = useState&lt;Message[]&gt;([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef&lt;HTMLDivElement&gt;(null);\n\n  useEffect(() =&gt; {\n    // Scroll to bottom on new messages\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSendMessage = async () =&gt; {\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev =&gt; [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    // Simulate AI response\n    setTimeout(() =&gt; {\n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'This is a sample response from the AI. In a real implementation, this would come from the backend API.',\n        timestamp: new Date(),\n      };\n\n      setMessages(prev =&gt; [...prev, aiMessage]);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    &lt;div className=\"flex flex-col h-full\"&gt;\n      {/* Message history */}\n      &lt;div className=\"flex-grow overflow-y-auto p-4 space-y-4\"&gt;\n        {messages.map(message =&gt; (\n          &lt;div\n            key={message.id}\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n          &gt;\n            &lt;div\n              className={`max-w-3/4 p-3 rounded-lg ${\n                message.role === 'user'\n                  ? 'bg-emerald-600 text-white'\n                  : 'bg-gray-700 text-gray-100'\n              }`}\n            &gt;\n              &lt;p&gt;{message.content}&lt;/p&gt;\n              &lt;div className=\"text-xs opacity-70 text-right mt-1\"&gt;\n                {new Date(message.timestamp).toLocaleTimeString()}\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        ))}\n\n        {isLoading &amp;&amp; (\n          &lt;div className=\"flex justify-start\"&gt;\n            &lt;div className=\"bg-gray-700 text-white p-3 rounded-lg\"&gt;\n              &lt;div className=\"flex space-x-2\"&gt;\n                &lt;div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"&gt;&lt;/div&gt;\n                &lt;div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-75\"&gt;&lt;/div&gt;\n                &lt;div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-150\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        )}\n\n        &lt;div ref={messagesEndRef} /&gt;\n      &lt;/div&gt;\n\n      {/* Message input */}\n      &lt;div className=\"p-4 border-t border-white/10\"&gt;\n        &lt;div className=\"flex items-center gap-2\"&gt;\n          &lt;button className=\"p-2 text-gray-400 hover:text-white hover:bg-white/5 rounded-full transition-all\"&gt;\n            &lt;PaperclipIcon className=\"w-5 h-5\" /&gt;\n          &lt;/button&gt;\n\n          &lt;input\n            type=\"text\"\n            value={input}\n            onChange={e =&gt; setInput(e.target.value)}\n            onKeyDown={e =&gt; e.key === 'Enter' &amp;&amp; handleSendMessage()}\n            placeholder=\"Type a message...\"\n            className=\"flex-grow px-4 py-2 bg-gray-800 rounded-full focus:outline-none focus:ring-2 focus:ring-emerald-500\"\n          /&gt;\n\n          &lt;button\n            onClick={handleSendMessage}\n            disabled={!input.trim()}\n            className=\"p-2 bg-emerald-600 hover:bg-emerald-700 disabled:bg-gray-700 disabled:text-gray-400 rounded-full transition-all\"\n          &gt;\n            &lt;Send className=\"w-5 h-5\" /&gt;\n          &lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"workspace-implementation-guide/#5-community-features","title":"5. Community Features","text":""},{"location":"workspace-implementation-guide/#implementation-steps_4","title":"Implementation Steps:","text":"<ol> <li>Create CommunitySection Component:</li> </ol> <pre><code>// CommunitySection.tsx\nimport { useState, useEffect } from 'react';\nimport { Users, TrendingUp, Award } from 'lucide-react';\nimport ProjectCard from './ProjectCard';\n\nexport default function CommunitySection() {\n  const [communityProjects, setCommunityProjects] = useState([]);\n  const [activeTab, setActiveTab] = useState('trending');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    // Fetch community projects based on activeTab\n    const fetchProjects = async () =&gt; {\n      setIsLoading(true);\n      try {\n        // In a real implementation, this would fetch from the API\n        // const res = await fetch(`/api/community/projects?filter=${activeTab}`);\n        // const data = await res.json();\n        // setCommunityProjects(data.projects);\n\n        // Mock data\n        setCommunityProjects([\n          {\n            id: '1',\n            title: 'Machine Learning Research Compilation',\n            description: 'A collection of ML papers and code repositories',\n            createdAt: new Date().toISOString(),\n            createdBy: 'ai_researcher',\n            resources: Array(12).fill(null),\n            likes: 120,\n          },\n          {\n            id: '2',\n            title: 'Web Development Best Practices',\n            description: 'Frontend and backend guides and resources',\n            createdAt: new Date().toISOString(),\n            createdBy: 'web_dev_pro',\n            resources: Array(8).fill(null),\n            likes: 84,\n          },\n        ]);\n      } catch (error) {\n        console.error('Error fetching community projects:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchProjects();\n  }, [activeTab]);\n\n  return (\n    &lt;div className=\"h-full flex flex-col\"&gt;\n      &lt;div className=\"border-b border-white/10 pb-4\"&gt;\n        &lt;h2 className=\"text-2xl font-bold mb-4\"&gt;Community&lt;/h2&gt;\n        &lt;div className=\"flex gap-2\"&gt;\n          &lt;button\n            onClick={() =&gt; setActiveTab('trending')}\n            className={`px-4 py-2 flex items-center gap-2 rounded-lg ${\n              activeTab === 'trending'\n                ? 'bg-emerald-500/20 text-emerald-400'\n                : 'hover:bg-white/5'\n            }`}\n          &gt;\n            &lt;TrendingUp className=\"w-5 h-5\" /&gt;\n            &lt;span&gt;Trending&lt;/span&gt;\n          &lt;/button&gt;\n          &lt;button\n            onClick={() =&gt; setActiveTab('featured')}\n            className={`px-4 py-2 flex items-center gap-2 rounded-lg ${\n              activeTab === 'featured'\n                ? 'bg-emerald-500/20 text-emerald-400'\n                : 'hover:bg-white/5'\n            }`}\n          &gt;\n            &lt;Award className=\"w-5 h-5\" /&gt;\n            &lt;span&gt;Featured&lt;/span&gt;\n          &lt;/button&gt;\n          &lt;button\n            onClick={() =&gt; setActiveTab('following')}\n            className={`px-4 py-2 flex items-center gap-2 rounded-lg ${\n              activeTab === 'following'\n                ? 'bg-emerald-500/20 text-emerald-400'\n                : 'hover:bg-white/5'\n            }`}\n          &gt;\n            &lt;Users className=\"w-5 h-5\" /&gt;\n            &lt;span&gt;Following&lt;/span&gt;\n          &lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"flex-grow overflow-y-auto p-4\"&gt;\n        {isLoading ? (\n          &lt;div className=\"grid grid-cols-3 gap-4\"&gt;\n            {Array(6)\n              .fill(null)\n              .map((_, i) =&gt; (\n                &lt;div\n                  key={i}\n                  className=\"bg-gray-800 rounded-lg h-40 animate-pulse\"\n                &gt;&lt;/div&gt;\n              ))}\n          &lt;/div&gt;\n        ) : (\n          &lt;div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n            {communityProjects.map(project =&gt; (\n              &lt;ProjectCard key={project.id} project={project} /&gt;\n            ))}\n          &lt;/div&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"workspace-implementation-guide/#next-steps","title":"Next Steps","text":"<p>After implementing these components, you should:</p> <ol> <li>Integrate Components:</li> <li>Update ChatGPTWorkspace.tsx to use all the new components</li> <li> <p>Create proper navigation between workspace views</p> </li> <li> <p>Test Responsiveness:</p> </li> <li>Add responsive styles for mobile and tablet views</li> <li> <p>Test on different device sizes</p> </li> <li> <p>Add Animations:</p> </li> <li>Use Framer Motion for smooth transitions between states</li> <li> <p>Add loading animations and feedback</p> </li> <li> <p>Connect to Backend:</p> </li> <li>Wire up all components to the actual API endpoints</li> <li> <p>Implement proper error handling</p> </li> <li> <p>User Testing:</p> </li> <li>Get feedback from users</li> <li>Refine the UI based on feedback</li> </ol>"},{"location":"workspace-implementation-plan/","title":"ChatGPT-Like Workspace Implementation Plan","text":""},{"location":"workspace-implementation-plan/#overview","title":"Overview","text":"<p>This document outlines the implementation plan for creating a ChatGPT-like workspace interface with the mandatory features specified by the project owner.</p>"},{"location":"workspace-implementation-plan/#core-features-to-implement","title":"Core Features to Implement","text":""},{"location":"workspace-implementation-plan/#1-user-profile-system-similar-to-chatgpt","title":"1. User Profile System (similar to ChatGPT)","text":"<ul> <li>Profile Management Page</li> <li>Personal information (name, email, profile picture)</li> <li>Account settings</li> <li>Usage statistics</li> <li>Subscription information and plan management</li> <li> <p>Security settings (password change, 2FA)</p> </li> <li> <p>User Preferences</p> </li> <li>Theme preferences (dark/light mode)</li> <li>Notification settings</li> <li>Display preferences</li> </ul>"},{"location":"workspace-implementation-plan/#2-left-side-slidersidebar","title":"2. Left Side Slider/Sidebar","text":"<ul> <li>Collapsible Sidebar</li> <li>Toggle button to expand/collapse</li> <li> <p>Workspace navigation</p> </li> <li> <p>Sections</p> </li> <li>Recent projects list</li> <li>Saved/pinned projects</li> <li>Project categories/folders</li> <li>Settings access</li> <li> <p>User profile quick access</p> </li> <li> <p>New Project Button</p> </li> <li>Prominent \"New Project\" button at the top</li> </ul>"},{"location":"workspace-implementation-plan/#3-workspace-with-stored-user-projects","title":"3. Workspace with Stored User Projects","text":"<ul> <li>Project List View</li> <li>Grid/list toggle for different views</li> <li>Project cards with preview, title, and last modified date</li> <li> <p>Quick actions (delete, rename, share)</p> </li> <li> <p>Project Organization</p> </li> <li>Folder structure for organizing projects</li> <li>Tagging system for categorization</li> <li> <p>Search functionality across all projects</p> </li> <li> <p>Project Persistence</p> </li> <li>Automatic saving of project state</li> <li>Version history/revisions</li> </ul>"},{"location":"workspace-implementation-plan/#4-project-creation-functionality","title":"4. Project Creation Functionality","text":"<ul> <li>Create Project Modal</li> <li>Project templates</li> <li>Blank project option</li> <li> <p>Import from file options</p> </li> <li> <p>Project Settings</p> </li> <li>Privacy controls (private, shared, public)</li> <li>Collaboration settings</li> <li> <p>Export options</p> </li> <li> <p>Resource Management</p> </li> <li>Add/remove resources to projects</li> <li>Resource categorization within projects</li> </ul>"},{"location":"workspace-implementation-plan/#5-ai-assistance","title":"5. AI Assistance","text":"<ul> <li>Chat-Style Interface</li> <li>Message history with user/AI message styling</li> <li>Code block formatting with syntax highlighting</li> <li> <p>Multi-turn conversations with context preservation</p> </li> <li> <p>AI Features</p> </li> <li>Resource summarization</li> <li>Query answering about projects</li> <li>Suggestions for improvements</li> <li> <p>Integration with search functionality</p> </li> <li> <p>Prompt Engineering</p> </li> <li>Context-aware prompting</li> <li>Summary optimization</li> <li>Error handling for API failures</li> </ul>"},{"location":"workspace-implementation-plan/#6-community-features","title":"6. Community Features","text":"<ul> <li>Shared Resources</li> <li>Public project gallery</li> <li>Featured community projects</li> <li> <p>Resource sharing mechanisms</p> </li> <li> <p>Collaboration Tools</p> </li> <li>Comments and feedback</li> <li>Real-time collaboration indicators</li> <li> <p>Activity feeds for collaborative projects</p> </li> <li> <p>Knowledge Sharing</p> </li> <li>Community discussions</li> <li>Q&amp;A section</li> <li>Tutorial/guide creation and sharing</li> </ul>"},{"location":"workspace-implementation-plan/#technical-implementation-approach","title":"Technical Implementation Approach","text":""},{"location":"workspace-implementation-plan/#frontend-components","title":"Frontend Components","text":"<ol> <li>ChatGPTWorkspace (Main container component)</li> <li>Manages overall layout and state</li> <li> <p>Handles authentication and user session</p> </li> <li> <p>Sidebar Component</p> </li> <li>Collapsible sidebar with animation</li> <li>Project navigation and filtering</li> <li> <p>User settings and profile access</p> </li> <li> <p>ProjectGrid/ListView Component</p> </li> <li>Displays user projects in different views</li> <li> <p>Handles sorting and filtering</p> </li> <li> <p>ChatInterface Component</p> </li> <li>Manages message history and display</li> <li>Handles message input and submission</li> <li> <p>Formats different message types (text, code, etc.)</p> </li> <li> <p>UserProfile Component</p> </li> <li>Profile management and settings</li> <li> <p>Subscription management</p> </li> <li> <p>Community Section Component</p> </li> <li>Displays shared resources and community content</li> <li>Handles interaction with community features</li> </ol>"},{"location":"workspace-implementation-plan/#backend-services","title":"Backend Services","text":"<ol> <li>User Management API</li> <li>Profile CRUD operations</li> <li>Authentication and session management</li> <li> <p>Subscription handling</p> </li> <li> <p>Project Storage Service</p> </li> <li>Project CRUD operations</li> <li>Resource management</li> <li> <p>Version control</p> </li> <li> <p>AI Service Integration</p> </li> <li>OpenAI API integration</li> <li>Prompt engineering</li> <li>Response processing</li> <li> <p>Caching layer</p> </li> <li> <p>Community API</p> </li> <li>Shared resource management</li> <li>Collaboration features</li> <li>Activity tracking</li> </ol>"},{"location":"workspace-implementation-plan/#implementation-phases","title":"Implementation Phases","text":""},{"location":"workspace-implementation-plan/#phase-1-core-ui-structure","title":"Phase 1: Core UI Structure","text":"<ol> <li>Enhance ChatGPTWorkspace.tsx with improved layout</li> <li>Implement fully functional collapsible sidebar</li> <li>Create basic project grid/list view</li> <li>Implement responsive design for all core components</li> </ol>"},{"location":"workspace-implementation-plan/#phase-2-user-profile-and-projects","title":"Phase 2: User Profile and Projects","text":"<ol> <li>Enhance user profile system with all required features</li> <li>Implement project creation, editing, and management</li> <li>Build project storage and retrieval system</li> <li>Add project organization features (folders, tags)</li> </ol>"},{"location":"workspace-implementation-plan/#phase-3-chat-interface-and-ai-integration","title":"Phase 3: Chat Interface and AI Integration","text":"<ol> <li>Build chat-style interface with message history</li> <li>Implement AI assistance integration</li> <li>Add prompt engineering for summaries</li> <li>Create caching system for AI responses</li> </ol>"},{"location":"workspace-implementation-plan/#phase-4-community-features-and-polish","title":"Phase 4: Community Features and Polish","text":"<ol> <li>Implement community section and shared resources</li> <li>Add collaboration tools</li> <li>Implement knowledge sharing features</li> <li>Final polish and performance optimization</li> </ol>"},{"location":"workspace-implementation-plan/#design-guidelines","title":"Design Guidelines","text":"<ul> <li>Use a dark theme as default (with light theme option)</li> <li>Clean, minimalist interface similar to ChatGPT</li> <li>Consistent spacing and typography</li> <li>Subtle animations for transitions and interactions</li> <li>Mobile-responsive design with appropriate breakpoints</li> </ul>"},{"location":"specs/dedupe-pipeline/","title":"Federated Search Deduplication Pipeline","text":""},{"location":"specs/dedupe-pipeline/#overview","title":"Overview","text":"<p>This document describes the conservative, no-loss deduplication pipeline for federated search results in Open Idea. The pipeline merges only when there is strong identity evidence and otherwise keeps items separate, ensuring no unique resource is lost.</p>"},{"location":"specs/dedupe-pipeline/#pipeline-steps","title":"Pipeline Steps","text":""},{"location":"specs/dedupe-pipeline/#1-normalization-normalizets","title":"1. Normalization (<code>normalize.ts</code>)","text":"<ul> <li>stripDoi(s): Lowercase, remove DOI URL/prefixes.</li> <li>normUrl(u): Lowercase host, remove hash, drop utm_* &amp; ref params, strip trailing slash.</li> <li>normTitle(t): Lowercase, strip punctuation, collapse whitespace.</li> <li>normAuthors(a): Lowercase, trim.</li> <li>pickYear(meta): Prefer published-print, else online, else created/updated year.</li> </ul>"},{"location":"specs/dedupe-pipeline/#2-identity-keys-keysts","title":"2. Identity Keys (<code>keys.ts</code>)","text":"<ul> <li>deriveKeys(r): Returns keys in priority order:</li> <li><code>doi:&lt;normalized-doi&gt;</code></li> <li><code>swh:&lt;swhid&gt;</code></li> <li><code>url:&lt;normalized-url&gt;</code></li> <li><code>srctitle:&lt;source&gt;:&lt;normalized-title&gt;</code></li> </ul>"},{"location":"specs/dedupe-pipeline/#3-merge-policy-mergets","title":"3. Merge Policy (<code>merge.ts</code>)","text":"<ul> <li>mergeResources(a, b):</li> <li>Description: keep longer/richer</li> <li>License: keep whichever has it</li> <li>Authors/tags: set union (case-insensitive)</li> <li>Meta: shallow-merge; preserve helpful fields</li> <li>Meta.sources: append <code>{source, url}</code> for provenance</li> <li>Never drop original URL; keep canonical/earliest</li> </ul>"},{"location":"specs/dedupe-pipeline/#4-deduplication-dedupets","title":"4. Deduplication (<code>dedupe.ts</code>)","text":"<ul> <li>dedupeConservative(items):</li> <li>Build clusters by strong keys (DOI, SWHID, URL)</li> <li>Merge only when strong key matches, else keep separate</li> <li>Optional heuristic merge (title+year+authors) if:<ul> <li>Title similarity \u2265 0.92</li> <li>|yearDelta| \u2264 1</li> <li>Authors overlap \u2265 1</li> </ul> </li> <li>Never merge generic titles or code repos with different owners</li> <li>Always preserve license and provenance</li> <li>Returns merged items, cluster/merge counts, and merge decisions</li> </ul>"},{"location":"specs/dedupe-pipeline/#edge-cases","title":"Edge Cases","text":"<ul> <li>Never merge if year difference &gt; 1</li> <li>Never merge generic titles by title alone</li> <li>Never merge papers with no author overlap</li> <li>Never merge code repos with different owners unless URL identical</li> </ul>"},{"location":"specs/dedupe-pipeline/#guarantees","title":"Guarantees","text":"<ul> <li>No-loss: No unique item is dropped</li> <li>Strong keys always merge; weak keys only with high-confidence heuristic</li> <li>Licenses and provenance are always preserved</li> </ul>"},{"location":"specs/dedupe-pipeline/#integration","title":"Integration","text":"<ul> <li>The API route <code>/api/search/route.ts</code> uses this pipeline and returns coverage metadata and (optionally) merge decisions for debugging.</li> </ul>"}]}